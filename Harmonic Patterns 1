//@version=4
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© fikira
// This source code is subject to the terms of the Creative Commons Zero v1.0 Universal license
// https://github.com/fikira12/Fibonacci-Retracement-Pivots.git
// Copyright (c) 2019 @fikira
study("[fikira] Harmonic Patterns 1", shorttitle="HaPat 1", max_bars_back=300, overlay=true)

no_wick = input(false, title="'NO WICK' [ON = high/low WITHOUT WICK] [OFF = high/low]")
show_z = input(false, title="Show ZigZag")
nwh = close > open ? close : close < open ? open : high // nwh = no wick (high)
nwl = close > open ? open : close < open ? close : low // nwh = no wick (low)

srch = no_wick ? nwh : high // IF "NO WICK" is ON > take the highest price without wick, else take high (with wick)
srcl = no_wick ? nwl : low  // IF "NO WICK" is ON > take the lowest price without wick, else take low (with wick)

ZZPercent = input(1.5, title="Minimum % Change", type=input.float)

trend = 0
trend := na(trend[1]) ? 1 : trend[1]
LL = 0.0
LL := na(LL[1]) ? srcl : LL[1]
HH = 0.0
HH := na(HH[1]) ? srch : HH[1]

PivotChg = ZZPercent * 0.01
zigzag = float(na)

if trend > 0  // trend is up, look for new swing low
    if srch >= HH  // new higher high detected
        HH := srch
        HH
    else
        if srcl < HH * (1 - PivotChg)
            zigzag :=srch[1]
            trend := -1
            LL := srcl
            LL
else
    // trend is down, look for new swing high
    if srcl <= LL  // new lower low detected
        LL := srcl
        LL
    else
        if srch > LL * (1 + PivotChg)
            zigzag := srcl[1]
            trend := 1
            HH := srch
            HH

oc = 0
oc := change(trend) > 0 ? 1 : change(trend) < 0 ? -1 : nz(oc[1])

css = oc == 1 ? color.red : color.blue

pL = zigzag and oc == 1
pH = zigzag and oc == -1

d = valuewhen(not na(zigzag), zigzag, 0)                                        // when there is a new "Highest" or "Lowest" point > use present value
//plot(d, color=color.red, offset=-1)                                           // Shark: 'c' = b

c = valuewhen(not na(zigzag), zigzag, 1)                                        // when there is a new "Highest" or "Lowest" point > use 1 point back as value
//plot(c, color=color.orange, offset=-1)                                        // Shark: 'b' = c

b = valuewhen(not na(zigzag), zigzag, 2)                                        // when there is a new "Highest" or "Lowest" point > use 2 points back as value
//plot(b, color=color.yellow, offset=-1)                                        // Shark: 'a' = b

a = valuewhen(not na(zigzag), zigzag, 3)                                        // when there is a new "Highest" or "Lowest" point > use 3 points back as value
//plot(a, color=color.lime, offset=-1)                                          // Shark: 'x' = a

x = valuewhen(not na(zigzag), zigzag, 4)                                        // when there is a new "Highest" or "Lowest" point > use 4 points back as value
//plot(x, color=color.aqua, offset=-1)                                          // Shark: '0' = x


dh = d > c and c < b and b > a
dl = d < c and c > b and b < a
ch = c > b and b < a
cl = c < b and b > a
bh = b > a
bl = b < a
ah = a > x
al = a < x

// Show ZigZag
plot(show_z ? zigzag : na, linewidth=2, color=css, offset=-1)

// Error margin
marge  = input(0, minval=0, maxval=10, step=1, title="Ratio tolerance 0 - 10 %") / 100
marge1 = 1 - marge
marge2 = 1 + marge

// 'Patterns' Visible?
_pt = input(false, title="-<><><><><><><><[Patterns]><><><><><><><>-")

abcd = input(true, title="Show 'ABCD'")
gartley = input(true, title="Show 'Gartley'")
cypher = input(true, title="Show 'Cypher'")
_5_0 = input(true, title="Show '[5-0]'")

_lab = input(false, title="-<><><><><><><><><[Labels]><><><><><><><>-")
show_L = input(true, title="Show Labels")

SIZE = input(title="Size Label", defval="tiny", options=["tiny", "small", "normal", "huge"])

_SIZE = size.small
if SIZE == "tiny"
    _SIZE := size.tiny
else
    if SIZE == "small"
        _SIZE := size.small
    else
        if SIZE == "normal"
            _SIZE := size.normal
        else
            if SIZE == "huge"
                _SIZE := size.huge

lev = input(75, title="Distance Label vs Bar")
invers = input(false, title="Invers label colour?"   )
_dr = input(false, title="-<><><><><><><><[Drawings]><><><><><><><>-")
show_D = input(true, title="Show Drawings")
lwd = input(7, minval=0, maxval=30, title="Linewidth [XABCD]")
lwd1 = input(3, minval=0, maxval=30, title="Linewidth [Connections]")
LINE = input(title="Line Type [Connections]", defval="dotted", options=["solid", "dashed", "dotted"])
_to = input(100, minval=100, title="Period [Look-Back]")

_LINE = size.small
if LINE == "solid"
    _LINE := line.style_solid
else
    if LINE == "dashed"
        _LINE := line.style_dashed
    else
        if LINE == "dotted"
            _LINE := line.style_dotted

_lin = input(false, title="-<><><><><><><><><[Lines]><><><><><><><>-")
choice_line_br = input("red" , title="Bearish lines", options=["red", "orange", "yellow", "green", "lime", "aqua", "blue", "purple", "fuchsia", "black", "white"])
choice_line_bl = input("lime", title="Bullish lines", options=["red", "orange", "yellow", "green", "lime", "aqua", "blue", "purple", "fuchsia", "black", "white"])

lw = input(2, minval=0, maxval=10, title="Linewidth [ENTRY, TP, SL]")

// Show 'Entry'
_E = input(false, title="-<><><><><><><><[Entry Point]><><><><><><><>-")
show_E = input(true, title="Show Entry Points")

// Show 'Stop Loss' Lines

_sl = input(false, title="-<><><><><><><><[Stop Loss]><><><><><><><>-")
show_SL = input(true, title="Show SL Lines")

// Show 'Take Profit' Lines

_tp = input(false, title="-<><><><><><><><[Take Profit]><><><><><><><>-")
show_TP = input(true, title="Show TP Lines")

TP1 = input(title="TP level 'ABCD', 'Cypher'", defval="0.382", options=["0.236", "0.382", "0.5", "0.618", "0.786", "1", "1.272", "1.618"])  // numbers = minutes, D = Day, W = Week, M = Month
TP2 = input(title="TP level 'ABCD' 'Gartley'", defval="0.618", options=["0.236", "0.382", "0.5", "0.618", "0.786", "1", "1.272", "1.618"])  // numbers = minutes, D = Day, W = Week, M = Month
TP3 = input(title="TP level ðŸ¦€ðŸ¦‡ðŸ¦‹", defval="1.272", options=["0.236", "0.382", "0.5", "0.618", "0.786", "1", "1.272", "1.618"])  // numbers = minutes, D = Day, W = Week, M = Month

_0_382 = 0.382
if TP1 == "0.236"
    _0_382 := 0.236
else
    if TP1 == "0.382"
        _0_382 := 0.382
    else
        if TP1 == "0.5"
            _0_382 := 0.5
        else
            if TP1 == "0.618"
                _0_382 := 0.618
            else
                if TP1 == "0.786"
                    _0_382 := 0.786
                else
                    if TP1 == "1"
                        _0_382 := 1
                    else
                        if TP1 == "1.272"
                            _0_382 := 1.272
                        else
                            if TP1 == "1.618"
                                _0_382 := 1.618


_0_618 = 0.618
if TP2 == "0.236"
    _0_618 := 0.236
else
    if TP2 == "0.382"
        _0_618 := 0.382
    else
        if TP2 == "0.5"
            _0_618 := 0.5
        else
            if TP2 == "0.618"
                _0_618 := 0.618
            else
                if TP2 == "0.786"
                    _0_618 := 0.786
                else
                    if TP2 == "1"
                        _0_618 := 1
                    else
                        if TP2 == "1.272"
                            _0_618 := 1.272
                        else
                            if TP2 == "1.618"
                                _0_618 := 1.618


_1_272 = 1.272
if TP3 == "0.236"
    _1_272 := 0.236
else
    if TP3 == "0.382"
        _1_272 := 0.382
    else
        if TP3 == "0.5"
            _1_272 := 0.5
        else
            if TP3 == "0.618"
                _1_272 := 0.618
            else
                if TP3 == "0.786"
                    _1_272 := 0.786
                else
                    if TP3 == "1"
                        _1_272 := 1
                    else
                        if TP3 == "1.272"
                            _1_272 := 1.272
                        else
                            if TP3 == "1.618"
                                _1_272 := 1.618


tp_0_382 = d + ((a - d) * _0_382)   // tp_1 = tp_0_382
tp_0_382a = d + ((c - d) * 0.382)
tp_0_5 = d + ((c - d) * 0.5)        // tp_1s = tp_0_5
tp_0_618 = d + ((a - d) * _0_618)   // tp_2 = tp_0_618
tp_0_618a = d + ((c - d) * _0_618)  // tp_1a = tp_0_618a
tp_0_886 = d + ((c - d) * 0.886)
tp_1_272 = d + ((c - d) * _1_272)   // tp_2a = tp_1_272

tp0_382 = d - ((d - a) * _0_382)    // tp1 = tp0_382
tp0_382a = d - ((d - c) * 0.382)
tp0_5 = d - ((d - c) * 0.5)         // tp1s = tp0_5
tp0_618 = d - ((d - a) * _0_618)    // tp2 = tp0_618
tp0_618a = d - ((d - c) * _0_618)   // tp1a = tp0_618a
tp0_886 = d - ((d - c) * 0.886)
tp1_272 = d - ((d - c) * _1_272)    // tp2a = tp1_272

e_0_886 = a - ((a - x) * 0.886)     // e_1s = e_0_886
e0_886 = a + ((x - a) * 0.886)      // e1s = e0_886


// 'ABCD'

// ABCD Bullish

c_bl = ch and c >= (b + (((a - b) * 0.618) * marge1)) and c <= (b + (((a - b) * 0.786) * marge2))
d_bl = dl and d >= (c - (((c - b) * 1.618) * marge2)) and d <= (c - (((c - b) * 1.272) * marge1))
ABCD_bl = c_bl and d_bl

// ABCD Bearish

c_br = cl and c <= (b - (((b - a) * 0.618) * marge1)) and c >= (b - (((b - a) * 0.786) * marge2))
d_br = dh and d <= (c + (((b - c) * 1.618) * marge2)) and d >= (c + (((b - c) * 1.272) * marge1))
ABCD_br = c_br and d_br

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// When the market arrives at a point, where D may be situated, donâ€™t rush into a trade.                                        //
// Use some techniques to make sure that the price reversed up (or down if itâ€™s a bearish ABCD).                                //
// The best scenario is a reversal candlestick pattern. A buy order may be set at or above the high of the candle at point D.   //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Take Profit Points (TP) ABCD
// Put a Stop Loss in line with your rules of risk management.

TP_1 = abcd and dl and ABCD_bl ? valuewhen(tp_0_382, tp_0_382, 0) : abcd and dh and ABCD_br ? valuewhen(tp0_382, tp0_382, 0) : na
TP_2 = abcd and dl and ABCD_bl ? valuewhen(tp_0_618, tp_0_618, 0) : abcd and dh and ABCD_br ? valuewhen(tp0_618, tp0_618, 0) : na
TP_3 = abcd and dl and ABCD_bl ? a : abcd and dh and ABCD_br ? a : na

// GARTLEY

// Gartley Bullish

g_b_bl = bl and b <= (a - (((a - x) * 0.624) * marge1)) and b >= (a - (((a - x) * 0.612) * marge2))
g_c_bl = ch and c <= (b + (((a - b) * 0.886) * marge2)) and c >= (b + (((a - b) * 0.382) * marge1))
g_d_bl = dl and d <= (a - (((a - b) * 1.27) * marge2)) and d >= (a - (((a - b) * 1.618) * marge2))

//Point B is at the 61.8% retracement of XA. This is the most important condition.
//Point C can be at the 38.2%-88.6% retracement of AB.
//Point D can be found at the 127.2%-161.8% extension of AB or at the 78.6% retracement of XA.

g_bl = g_b_bl and g_c_bl and g_d_bl

// Gartley Bearish

g_b_br = bh and b >= (a + (((x - a) * 0.624) * marge1)) and b <= (a + (((x - a) * 0.612) * marge2))
g_c_br = cl and c >= (b - (((b - a) * 0.886) * marge2)) and c <= (b - (((b - a) * 0.382) * marge1))
g_d_br = dh and d >= (a + (((b - a) * 1.27) * marge2)) and d <= (a + (((b - a) * 1.618) * marge2))

//Point B is at the 61.8% retracement of XA. This is the most important condition.
//Point C can be at the 38.2%-88.6% retracement of AB.
//Point D can be found at the 127.2%-161.8% extension of AB or at the 78.6% retracement of XA.

g_br = g_b_br and g_c_br and g_d_br

// Take Profit lines Gartley

//TP1: 61.8% of CD
//TP2: the size of XA projected from D
//SL1: Stop Loss at x (+/-1%?)
// Put a Stop Loss in line with your rules of risk management.

ENTRYg = dl and g_bl ? d : dh and g_br ? d : na
TP_1g = dl and g_bl ? valuewhen(tp_0_618a, tp_0_618a, 0) : dh and g_br ? valuewhen(tp0_618a, tp0_618a, 0) : na
TP_2g = dl and g_bl ? d + (a - x) : dh and g_br ? d - (x - a) : na
SL_1g = dl and g_bl ? x - (x / 100) : dh and g_br ? x + (x / 100) : na

// Cypher Bullish

//Point B is between 38.2%-61.8% fibonacci retracement of XA
//Point C is between 113%-141.4% Fibonacci retracement of AB
//Point D is between  127.2%-200% fibonacci retracement of BC
//Point D should be at the 78.6% fibonacci retracement of XC

cy_b_bl = bl and b <= (a - (((a - x) * 0.382) * marge1)) and b >= (a - (((a - x) * 0.618) * marge2))
cy_c_bl = ch and c <= (b + (((a - b) * 1.414) * marge2)) and c >= (b + (((a - b) * 1.13) * marge1))
cy_d_bl = dl and d <= (c - (((c - b) * 1.272) * marge2)) and d >= (c - (((c - b) * 2.00) * marge2))
cy_d_bl2 = dl and d <= (c - (((c - x) * 0.778) * marge1)) and d >= (c - (((c - x) * 0.794) * marge2))

cy_bl = cy_b_bl and cy_c_bl and cy_d_bl and cy_d_bl2

// Cypher Bearish

cy_b_br = bh and b >= (a + (((x - a) * 0.382) * marge1)) and b <= (a + (((x - a) * 0.618) * marge2))
cy_c_br = cl and c >= (b - (((b - a) * 1.414) * marge2)) and c <= (b - (((b - a) * 1.13) * marge1))
cy_d_br = dh and d >= (c + (((b - c) * 1.272) * marge2)) and d <= (c + (((b - c) * 2.00) * marge2))
cy_d_br2 = dh and d >= (c + (((x - c) * 0.778) * marge1)) and d <= (c + (((x - c) * 0.794) * marge2))

cy_br = cy_b_br and cy_c_br and cy_d_br and cy_d_br2

// Take Profit lines Cypher
// TP1 = B
// TP2 = 38.2% fibonacci retracement of CD
// TP3 = 50% fibonacci retracement of CD
// TP4 = A

ENTRYcy = dl and cy_bl ? d : dh and cy_br ? d : na
TP_1cy = dl and cy_bl ? b : dh and cy_br ? b : na
TP_2cy = dl and cy_bl ? valuewhen(tp_0_382a, tp_0_382a, 0) : dh and cy_br ? valuewhen(tp0_382a, tp0_382a, 0) : na
TP_3cy = dl and cy_bl ? valuewhen(tp_0_5, tp_0_5, 0) : dh and cy_br ? valuewhen(tp0_5, tp0_5, 0) : na
TP_4cy = dl and cy_bl ? a : dh and cy_br ? a : na

// 5-0 Bullish

//Point B is between 113%-161.8% fibonacci retracement of XA
//Point C is between 161.8%-224% Fibonacci retracement of AB
//Point D is between 50% fibonacci retracement of BC

_5_b_bl = bl and b <= (a - (((a - x) * 1.13) * marge1)) and b >= (a - (((a - x) * 1.618) * marge2))
_5_c_bl = ch and c <= (b + (((a - b) * 2.24) * marge2)) and c >= (b + (((a - b) * 1.618) * marge1))
_5_d_bl = dl and d <= (c - (((c - b) * 0.495) * marge2)) and d >= (c - (((c - b) * 0.505) * marge2))

_5_bl = _5_b_bl and _5_c_bl and _5_d_bl

// 5-0 Bearish

_5_b_br = bh and b >= (a + (((x - a) * 1.13) * marge1)) and b <= (a + (((x - a) * 1.618) * marge2))
_5_c_br = cl and c >= (b - (((b - a) * 2.24) * marge2)) and c <= (b - (((b - a) * 1.618) * marge1))
_5_d_br = dh and d >= (c + (((b - c) * 0.495) * marge2)) and d <= (c + (((b - c) * 0.505) * marge2))

_5_br = _5_b_br and _5_c_br and _5_d_br

//Take Profit: 50-88.6% fibonacci retracement of CD, also C

ENTRY5 = dl and _5_bl ? d : dh and _5_br ? d : na
TP_1_5 = dl and _5_bl ? valuewhen(tp_0_5, tp_0_5, 0) : dh and _5_br ? valuewhen(tp0_5, tp0_5, 0) : na
TP_2_5 = dl and _5_bl ? valuewhen(tp_0_886, tp_0_886, 0) : dh and _5_br ? valuewhen(tp0_886, tp0_886, 0) : na
TP_3_5 = dl and _5_bl ? c : dh and _5_br ? c : na

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// Labels and Lines

label = invers ? color.new(color.white, 60) : color.new(color.black, 60)
text  = invers ? color.new(color.black, 0) : color.new(color.white, 0)
textyellow = color.new(color.yellow, 0)

line_red = color.new(color.red, 0)

choice_line_tp1 = input("yellow", title="TP line 1", options=["red", "orange", "yellow", "green", "lime", "aqua", "blue", "purple", "fuchsia", "black", "white"])
choice_line_tp2 = input("white" , title="TP line 2", options=["red", "orange", "yellow", "green", "lime", "aqua", "blue", "purple", "fuchsia", "black", "white"])
choice_line_tp3 = input("lime"  , title="TP line 3", options=["red", "orange", "yellow", "green", "lime", "aqua", "blue", "purple", "fuchsia", "black", "white"])
choice_line_tp4 = input("orange", title="TP line 4", options=["red", "orange", "yellow", "green", "lime", "aqua", "blue", "purple", "fuchsia", "black", "white"])

line_yellow =
 choice_line_tp1 == "red"     ? color.new(color.red, 0) :
 choice_line_tp1 == "orange"  ? color.new(color.orange, 0) :
 choice_line_tp1 == "yellow"  ? color.new(color.yellow, 0) :
 choice_line_tp1 == "green"   ? color.new(color.green, 0) :
 choice_line_tp1 == "lime"    ? color.new(color.lime, 0) :
 choice_line_tp1 == "aqua"    ? color.new(color.aqua, 0) :
 choice_line_tp1 == "blue"    ? color.new(color.blue, 0) :
 choice_line_tp1 == "purple"  ? color.new(color.purple, 0) :
 choice_line_tp1 == "fuchsia" ? color.new(color.fuchsia, 0) :
 choice_line_tp1 == "black"   ? color.new(color.black, 0) :
 choice_line_tp1 == "white"   ? color.new(color.white, 0) : na

line_white =
 choice_line_tp2 == "red"     ? color.new(color.red, 0) :
 choice_line_tp2 == "orange"  ? color.new(color.orange, 0) :
 choice_line_tp2 == "yellow"  ? color.new(color.yellow, 0) :
 choice_line_tp2 == "green"   ? color.new(color.green, 0) :
 choice_line_tp2 == "lime"    ? color.new(color.lime, 0) :
 choice_line_tp2 == "aqua"    ? color.new(color.aqua, 0) :
 choice_line_tp2 == "blue"    ? color.new(color.blue, 0) :
 choice_line_tp2 == "purple"  ? color.new(color.purple, 0) :
 choice_line_tp2 == "fuchsia" ? color.new(color.fuchsia, 0) :
 choice_line_tp2 == "black"   ? color.new(color.black, 0) :
 choice_line_tp2 == "white"   ? color.new(color.white, 0) : na

line_lime =
 choice_line_tp3 == "red"     ? color.new(color.red, 0) :
 choice_line_tp3 == "orange"  ? color.new(color.orange, 0) :
 choice_line_tp3 == "yellow"  ? color.new(color.yellow, 0) :
 choice_line_tp3 == "green"   ? color.new(color.green, 0) :
 choice_line_tp3 == "lime"    ? color.new(color.lime, 0) :
 choice_line_tp3 == "aqua"    ? color.new(color.aqua, 0) :
 choice_line_tp3 == "blue"    ? color.new(color.blue, 0) :
 choice_line_tp3 == "purple"  ? color.new(color.purple, 0) :
 choice_line_tp3 == "fuchsia" ? color.new(color.fuchsia, 0) :
 choice_line_tp3 == "black"   ? color.new(color.black, 0) :
 choice_line_tp3 == "white"   ? color.new(color.white, 0) : na

line_orange =
 choice_line_tp4 == "red"     ? color.new(color.red, 0) :
 choice_line_tp4 == "orange"  ? color.new(color.orange, 0) :
 choice_line_tp4 == "yellow"  ? color.new(color.yellow, 0) :
 choice_line_tp4 == "green"   ? color.new(color.green, 0) :
 choice_line_tp4 == "lime"    ? color.new(color.lime, 0) :
 choice_line_tp4 == "aqua"    ? color.new(color.aqua, 0) :
 choice_line_tp4 == "blue"    ? color.new(color.blue, 0) :
 choice_line_tp4 == "purple"  ? color.new(color.purple, 0) :
 choice_line_tp4 == "fuchsia" ? color.new(color.fuchsia, 0) :
 choice_line_tp4 == "black"   ? color.new(color.black, 0) :
 choice_line_tp4 == "white"   ? color.new(color.white, 0) : na

line_red1 =
 choice_line_br == "red"     ? color.new(color.red, 45) :
 choice_line_br == "orange"  ? color.new(color.orange, 45) :
 choice_line_br == "yellow"  ? color.new(color.yellow, 45) :
 choice_line_br == "green"   ? color.new(color.green, 45) :
 choice_line_br == "lime"    ? color.new(color.lime, 45) :
 choice_line_br == "aqua"    ? color.new(color.aqua, 45) :
 choice_line_br == "blue"    ? color.new(color.blue, 45) :
 choice_line_br == "purple"  ? color.new(color.purple, 45) :
 choice_line_br == "fuchsia" ? color.new(color.fuchsia, 45) :
 choice_line_br == "black"   ? color.new(color.black, 45) :
 choice_line_br == "white"   ? color.new(color.white, 45) : na

line_lime1 =
 choice_line_bl == "red"     ? color.new(color.red, 45) :
 choice_line_bl == "orange"  ? color.new(color.orange, 45) :
 choice_line_bl == "yellow"  ? color.new(color.yellow, 45) :
 choice_line_bl == "green"   ? color.new(color.green, 45) :
 choice_line_bl == "lime"    ? color.new(color.lime, 45) :
 choice_line_bl == "aqua"    ? color.new(color.aqua, 45) :
 choice_line_bl == "blue"    ? color.new(color.blue, 45) :
 choice_line_bl == "purple"  ? color.new(color.purple, 45) :
 choice_line_bl == "fuchsia" ? color.new(color.fuchsia, 45) :
 choice_line_bl == "black"   ? color.new(color.black, 45) :
 choice_line_bl == "white"   ? color.new(color.white, 45) : na

phigh = pivothigh(ABCD_br ? zigzag : na, 0, 0)
plow = pivotlow(ABCD_bl ? zigzag : na, 0, 0)
phighg = pivothigh(g_br ? zigzag : na, 0, 0)
plowg = pivotlow(g_bl ? zigzag : na, 0, 0)
phighcy = pivothigh(cy_br ? zigzag : na, 0, 0)
plowcy = pivotlow(cy_bl ? zigzag : na, 0, 0)
phigh_5 = pivothigh(_5_br ? zigzag : na, 0, 0)
plow_5 = pivotlow(_5_bl ? zigzag : na, 0, 0)
val0_382 = valuewhen(tp0_382, tp0_382, 0)
val_0_382 = valuewhen(tp_0_382, tp_0_382, 0)
val0_382a = valuewhen(tp0_382a, tp0_382a, 0)
val_0_382a = valuewhen(tp_0_382a, tp_0_382a, 0)
val0_618 = valuewhen(tp0_618, tp0_618, 0)
val0_618a = valuewhen(tp0_618a, tp0_618a, 0)
val_0_618 = valuewhen(tp_0_618, tp_0_618, 0)
val_0_618a = valuewhen(tp_0_618a, tp_0_618a, 0)
val1_272 = valuewhen(tp1_272, tp1_272, 0)
val_1_272 = valuewhen(tp_1_272, tp_1_272, 0)
val0_886 = valuewhen(tp0_886, tp0_886, 0)
val_0_886 = valuewhen(tp_0_886, tp_0_886, 0)
eval0_886 = valuewhen(e0_886, e0_886, 0)
eval_0_886 =  valuewhen(e_0_886, e_0_886, 0)
val0_5 = valuewhen(tp0_5, tp0_5, 0)
val_0_5 = valuewhen(tp_0_5, tp_0_5, 0)

// Functions Drawings

f_BIh(len_, x_) =>
    BIh = 0
    for i = 1 to len_
        if high[i] == x_
            break
        BIh := BIh + 1
        BIh
    BIh

f_BIl(len_, x_) =>
    BIl = 0
    for i = 1 to len_
        if low[i] == x_
            break
        BIl := BIl + 1
        BIl
    BIl

// Drawings Bullish

BIch = f_BIh(_to, c)
BIbl = f_BIl(_to, b)
BIah = f_BIh(_to, a)
BIxl = f_BIl(_to, x)

// Drawings Bearish

BIcl = f_BIl(_to, c)
BIbh = f_BIh(_to, b)
BIal = f_BIl(_to, a)
BIxh = f_BIh(_to, x)

//BIch = 0                                                                        // bar_index = 0
//for i = 0 to _to                                                                // number of bars back 0 to _to
//    if high[i] == c                                                             // if high equals c > take number of bars
//        break
//    BIch := BIch + 1                                                            // count + 1 > this is used in bar_index to know where to plot the points



// ABCD Bearish
if phigh
    label1 = abcd and show_L ? label.new(bar_index[1], HH + HH/lev, text="ABCD" + "\nTP1 " + tostring(TP_1) + "\nTP2 " + tostring(TP_2) + "\nTP3 " + tostring(TP_3), textcolor=text, style=label.style_labeldown, color=label, size=SIZE) : na
    line1 = abcd and show_TP ? line.new(bar_index[2], val0_382, bar_index, val0_382, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime) : na
    line2 = abcd and show_TP ? line.new(bar_index[2], val0_618, bar_index, val0_618, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_white) : na
    line3 = abcd and show_TP ? line.new(bar_index[2], a, bar_index, a, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_yellow) : na
    line4 = abcd and show_D ? line.new(bar_index[BIal], a, bar_index[BIbh], b, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_red1) : na
    line5 = abcd and show_D ? line.new(bar_index[BIal], a, bar_index[BIcl], c, xloc = xloc.bar_index, style=_LINE, extend=extend.none, color=line_red1) : na
    line6 = abcd and show_D ? line.new(bar_index[BIbh], b, bar_index[BIcl], c, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_red1) : na
    line7 = abcd and show_D ? line.new(bar_index[BIbh], b, bar_index[1], d, xloc = xloc.bar_index, style=_LINE, extend=extend.none, color=line_red1) : na
    line8 = abcd and show_D ? line.new(bar_index[BIcl], c, bar_index[1], d, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_red1) : na
    line.set_width(line1, lw)
    line.set_width(line2, lw)
    line.set_width(line3, lw)
    line.set_width(line4, lwd)
    line.set_width(line5, lwd1)
    line.set_width(line6, lwd)
    line.set_width(line7, lwd1)
    line.set_width(line8, lwd)

// ABCD Bullish
if plow
    label1 = abcd and show_L ? label.new(bar_index[1], LL - LL/lev, text="ABCD" + "\nTP1 " + tostring(TP_1) + "\nTP2 " + tostring(TP_2) + "\nTP3 " + tostring(TP_3), textcolor=text, style=label.style_labelup, color=label, size=SIZE) : na
    line1 = abcd and show_TP ? line.new(bar_index[2], val_0_382, bar_index, val_0_382, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime) : na
    line2 = abcd and show_TP ? line.new(bar_index[2], val_0_618, bar_index, val_0_618, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_white) : na
    line3 = abcd and show_TP ? line.new(bar_index[2], a, bar_index, a, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_yellow) : na
    line4 = abcd and show_D ? line.new(bar_index[BIah], a, bar_index[BIbl], b, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime1) : na
    line5 = abcd and show_D ? line.new(bar_index[BIah], a, bar_index[BIch], c, xloc = xloc.bar_index, style=_LINE, extend=extend.none, color=line_lime1) : na
    line6 = abcd and show_D ? line.new(bar_index[BIbl], b, bar_index[BIch], c, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime1) : na
    line7 = abcd and show_D ? line.new(bar_index[BIbl], b, bar_index[1], d, xloc = xloc.bar_index, style=_LINE, extend=extend.none, color=line_lime1) : na
    line8 = abcd and show_D ? line.new(bar_index[BIch], c, bar_index[1], d, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime1) : na
    line.set_width(line1, lw)
    line.set_width(line2, lw)
    line.set_width(line3, lw)
    line.set_width(line4, lwd)
    line.set_width(line5, lwd1)
    line.set_width(line6, lwd)
    line.set_width(line7, lwd1)
    line.set_width(line8, lwd)

// Gartley Bearish
if phighg
    label1 = gartley and show_L ? label.new(bar_index[1], HH + HH/lev, text="Gartley" + "\nENTRY " + tostring(ENTRYg) + "\nTP1 " + tostring(TP_1g) + "\nTP2 " + tostring(TP_2g) + "\nSL " + tostring(SL_1g), textcolor=text, style=label.style_labeldown, color=label, size=SIZE) : na
    line1 = gartley and show_TP ? line.new(bar_index[2], val0_618a, bar_index, val0_618a, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime) : na  // TP1
    line2 = gartley and show_TP ? line.new(bar_index[2], d - (x - a), bar_index, d - (x - a), xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_yellow) : na // TP2
    line3 = gartley and show_E ? line.new(bar_index[1], d, bar_index, d, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_white) : na  // = ENTRY
    line4 = gartley and show_SL ? line.new(bar_index[2], x + (x / 100), bar_index, x + (x / 100), xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_red) : na  // SL
    line5 = gartley and show_D ? line.new(bar_index[BIxh], x, bar_index[BIal], a, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_red1) : na
    line6 = gartley and show_D ? line.new(bar_index[BIxh], x, bar_index[BIbh], b, xloc = xloc.bar_index, style=_LINE, extend=extend.none, color=line_red1) : na
    line7 = gartley and show_D ? line.new(bar_index[BIal], a, bar_index[BIbh], b, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_red1) : na
    line8 = gartley and show_D ? line.new(bar_index[BIbh], b, bar_index[BIcl], c, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_red1) : na
    line9 = gartley and show_D ? line.new(bar_index[BIbh], b, bar_index[1], d, xloc = xloc.bar_index, style=_LINE, extend=extend.none, color=line_red1) : na
    line10 = gartley and show_D ? line.new(bar_index[BIcl], c, bar_index[1], d, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_red1) : na
    line.set_style(line3, line.style_arrow_left)  // ENTRY
    line.set_style(line4, line.style_dashed)
    line.set_width(line1, lw)
    line.set_width(line2, lw)
    line.set_width(line3, lw)
    line.set_width(line4, lw)
    line.set_width(line5, lwd)
    line.set_width(line6, lwd1)
    line.set_width(line7, lwd)
    line.set_width(line8, lwd)
    line.set_width(line9, lwd1)
    line.set_width(line10, lwd)

// Gartley Bullish
if plowg
    label1 = gartley and show_L ? label.new(bar_index[1], LL - LL/lev, text="Gartley" + "\nENTRY " + tostring(ENTRYg) + "\nTP1 " + tostring(TP_1g) + "\nTP2 " + tostring(TP_2g) + "\nSL " + tostring(SL_1g), textcolor=text, style=label.style_labelup, color=label, size=SIZE) : na
    line1 = gartley and show_TP ? line.new(bar_index[2], val_0_618a, bar_index, val_0_618a, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime) : na
    line2 = gartley and show_TP ? line.new(bar_index[2], d + (a - x), bar_index, d + (a - x), xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_yellow) : na
    line3 = gartley and show_E ? line.new(bar_index[1], d, bar_index, d, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_white) : na
    line4 = gartley and show_SL ? line.new(bar_index[2], x - (x / 100), bar_index, x - (x / 100), xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_red) : na
    line5 = gartley and show_D ? line.new(bar_index[BIxl], x, bar_index[BIah], a, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime1) : na
    line6 = gartley and show_D ? line.new(bar_index[BIxl], x, bar_index[BIbl], b, xloc = xloc.bar_index, style=_LINE, extend=extend.none, color=line_lime1) : na
    line7 = gartley and show_D ? line.new(bar_index[BIah], a, bar_index[BIbl], b, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime1) : na
    line8 = gartley and show_D ? line.new(bar_index[BIbl], b, bar_index[BIch], c, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime1) : na
    line9 = gartley and show_D ? line.new(bar_index[BIbl], b, bar_index[1], d, xloc = xloc.bar_index, style=_LINE, extend=extend.none, color=line_lime1) : na
    line10 = gartley and show_D ? line.new(bar_index[BIch], c, bar_index[1], d, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime1) : na
    line.set_style(line3, line.style_arrow_left)
    line.set_style(line4, line.style_dashed)
    line.set_width(line1, lw)
    line.set_width(line2, lw)
    line.set_width(line3, lw)
    line.set_width(line4, lw)
    line.set_width(line5, lwd)
    line.set_width(line6, lwd1)
    line.set_width(line7, lwd)
    line.set_width(line8, lwd)
    line.set_width(line9, lwd1)
    line.set_width(line10, lwd)

// Cypher Bearish
if phighcy
    label1 = cypher and show_L ? label.new(bar_index[1], HH + HH/lev, text="Cypher" + "\nENTRY " + tostring(ENTRYcy) + "\nTP1 " + tostring(TP_1cy) + "\nTP2 " + tostring(TP_2cy) + "\nTP3 " + tostring(TP_3cy)+ "\nTP4 " + tostring(TP_4cy), textcolor=text, style=label.style_labeldown, color=label, size=SIZE) : na
    line1 = cypher and show_TP ? line.new(bar_index[2], b, bar_index, b, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime) : na
    line2 = cypher and show_TP ? line.new(bar_index[2], val0_382a, bar_index, val0_382a, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_white) : na
    line3 = cypher and show_TP ? line.new(bar_index[2], val0_5, bar_index, val0_5, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_yellow) : na
    line4 = cypher and show_TP ? line.new(bar_index[2], a, bar_index, a, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_orange) : na
    line5 = cypher and show_E ? line.new(bar_index[1], d, bar_index, d, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_white) : na
    line6 = cypher and show_D ? line.new(bar_index[BIxh], x, bar_index[BIal], a, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_red1) : na
    line7 = cypher and show_D ? line.new(bar_index[BIxh], x, bar_index[BIbh], b, xloc = xloc.bar_index, style=_LINE, extend=extend.none, color=line_red1) : na
    line8 = cypher and show_D ? line.new(bar_index[BIal], a, bar_index[BIbh], b, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_red1) : na
    line9 = cypher and show_D ? line.new(bar_index[BIbh], b, bar_index[BIcl], c, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_red1) : na
    line10 = cypher and show_D ? line.new(bar_index[BIbh], b, bar_index[1], d, xloc = xloc.bar_index, style=_LINE, extend=extend.none, color=line_red1) : na
    line11 = cypher and show_D ? line.new(bar_index[BIcl], c, bar_index[1], d, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_red1) : na
    line.set_style(line5, line.style_arrow_left)
    line.set_width(line1, lw)
    line.set_width(line2, lw)
    line.set_width(line3, lw)
    line.set_width(line4, lw)
    line.set_width(line5, lw)
    line.set_width(line6, lwd)
    line.set_width(line7, lwd1)
    line.set_width(line8, lwd)
    line.set_width(line9, lwd)
    line.set_width(line10, lwd1)
    line.set_width(line11, lwd)

// Cypher Bullish
if plowcy
    label1 = cypher and show_L ? label.new(bar_index[1], LL - LL/lev, text="Cypher" + "\nENTRY " + tostring(ENTRYcy) + "\nTP1 " + tostring(TP_1cy) + "\nTP2 " + tostring(TP_2cy) + "\nTP3 " + tostring(TP_3cy)+ "\nTP4 " + tostring(TP_4cy), textcolor=text, style=label.style_labelup, color=label, size=SIZE) : na
    line1 = cypher and show_TP ? line.new(bar_index[2], b, bar_index, b, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime) : na
    line2 = cypher and show_TP ? line.new(bar_index[2], val_0_382a, bar_index, val_0_382a, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_white) : na
    line3 = cypher and show_TP ? line.new(bar_index[2], val_0_5, bar_index, val_0_5, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_yellow) : na
    line4 = cypher and show_TP ? line.new(bar_index[2], a, bar_index, a, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_orange) : na
    line5 = cypher and show_E ? line.new(bar_index[1], d, bar_index, d, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_white) : na
    line6 = cypher and show_D ? line.new(bar_index[BIxl], x, bar_index[BIah], a, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime1) : na
    line7 = cypher and show_D ? line.new(bar_index[BIxl], x, bar_index[BIbl], b, xloc = xloc.bar_index, style=_LINE, extend=extend.none, color=line_lime1) : na
    line8 = cypher and show_D ? line.new(bar_index[BIah], a, bar_index[BIbl], b, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime1) : na
    line9 = cypher and show_D ? line.new(bar_index[BIbl], b, bar_index[BIch], c, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime1) : na
    line10 = cypher and show_D ? line.new(bar_index[BIbl], b, bar_index[1], d, xloc = xloc.bar_index, style=_LINE, extend=extend.none, color=line_lime1) : na
    line11 = cypher and show_D ? line.new(bar_index[BIch], c, bar_index[1], d, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime1) : na
    line.set_style(line5, line.style_arrow_left)
    line.set_width(line1, lw)
    line.set_width(line2, lw)
    line.set_width(line3, lw)
    line.set_width(line4, lw)
    line.set_width(line5, lw)
    line.set_width(line6, lwd)
    line.set_width(line7, lwd1)
    line.set_width(line8, lwd)
    line.set_width(line9, lwd)
    line.set_width(line10, lwd1)
    line.set_width(line11, lwd)

// 5-0 Bearish
if phigh_5
    label1 = _5_0 and show_L ? label.new(bar_index[1], HH + HH/lev, text="[5-0]" + "\nENTRY " + tostring(ENTRY5) + "\nTP1 " + tostring(TP_1_5) + "\nTP2 " + tostring(TP_2_5) + "\nTP3 " + tostring(TP_3_5), textcolor=text, style=label.style_labeldown, color=label, size=SIZE) : na
    line1 = _5_0 and show_TP ? line.new(bar_index[2], val0_5, bar_index, val0_5, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_yellow) : na
    line2 = _5_0 and show_TP ? line.new(bar_index[2], val0_886, bar_index, val0_886, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_white) : na
    line3 = _5_0 and show_TP ? line.new(bar_index[2], c, bar_index, c, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime) : na
    line4 = _5_0 and show_E ? line.new(bar_index[1], d, bar_index, d, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_white) : na
    line5 = _5_0 and show_D ? line.new(bar_index[BIxh], x, bar_index[BIal], a, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_red1) : na
    line6 = _5_0 and show_D ? line.new(bar_index[BIxh], x, bar_index[BIbh], b, xloc = xloc.bar_index, style=_LINE, extend=extend.none, color=line_red1) : na
    line7 = _5_0 and show_D ? line.new(bar_index[BIal], a, bar_index[BIbh], b, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_red1) : na
    line8 = _5_0 and show_D ? line.new(bar_index[BIbh], b, bar_index[BIcl], c, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_red1) : na
    line9 = _5_0 and show_D ? line.new(bar_index[BIbh], b, bar_index[1], d, xloc = xloc.bar_index, style=_LINE, extend=extend.none, color=line_red1) : na
    line10 = _5_0 and show_D ? line.new(bar_index[BIcl], c, bar_index[1], d, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_red1) : na
    line11 = _5_0 and show_D ? line.new(bar_index[BIal], a, bar_index[BIcl], c, xloc = xloc.bar_index, style=_LINE, extend=extend.none, color=line_red1) : na
    line.set_style(line4, line.style_arrow_left)
    line.set_width(line1, lw)
    line.set_width(line2, lw)
    line.set_width(line3, lw)
    line.set_width(line4, lw)
    line.set_width(line5, lwd)
    line.set_width(line6, lwd1)
    line.set_width(line7, lwd)
    line.set_width(line8, lwd)
    line.set_width(line9, lwd1)
    line.set_width(line10, lwd)
    line.set_width(line11, lwd1)

// 5-0 Bullish
if plow_5
    label1 = _5_0 and show_L ? label.new(bar_index[1], LL - LL/lev, text="[5-0]" + "\nENTRY " + tostring(ENTRY5) + "\nTP1 " + tostring(TP_1_5) + "\nTP2 " + tostring(TP_2_5) + "\nTP3 " + tostring(TP_3_5), textcolor=text, style=label.style_labelup, color=label, size=SIZE) : na
    line1 = _5_0 and show_TP ? line.new(bar_index[2], val_0_5, bar_index, val_0_5, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_yellow) : na
    line2 = _5_0 and show_TP ? line.new(bar_index[2], val_0_886, bar_index, val_0_886, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_white) : na
    line3 = _5_0 and show_TP ? line.new(bar_index[2], c, bar_index, c, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_orange) : na
    line4 = _5_0 and show_E ? line.new(bar_index[1], d, bar_index, d, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_white) : na
    line5 = _5_0 and show_D ? line.new(bar_index[BIxl], x, bar_index[BIah], a, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime1) : na
    line6 = _5_0 and show_D ? line.new(bar_index[BIxl], x, bar_index[BIbl], b, xloc = xloc.bar_index, style=_LINE, extend=extend.none, color=line_lime1) : na
    line7 = _5_0 and show_D ? line.new(bar_index[BIah], a, bar_index[BIbl], b, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime1) : na
    line8 = _5_0 and show_D ? line.new(bar_index[BIbl], b, bar_index[BIch], c, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime1) : na
    line9 = _5_0 and show_D ? line.new(bar_index[BIbl], b, bar_index[1], d, xloc = xloc.bar_index, style=_LINE, extend=extend.none, color=line_lime1) : na
    line10 = _5_0 and show_D ? line.new(bar_index[BIch], c, bar_index[1], d, xloc = xloc.bar_index, style=line.style_solid, extend=extend.none, color=line_lime1) : na
    line11 = _5_0 and show_D ? line.new(bar_index[BIah], a, bar_index[BIch], c, xloc = xloc.bar_index, style=_LINE, extend=extend.none, color=line_lime1) : na
    line.set_style(line4, line.style_arrow_left)
    line.set_width(line1, lw)
    line.set_width(line2, lw)
    line.set_width(line3, lw)
    line.set_width(line4, lw)
    line.set_width(line5, lwd)
    line.set_width(line6, lwd1)
    line.set_width(line7, lwd)
    line.set_width(line8, lwd)
    line.set_width(line9, lwd1)
    line.set_width(line10, lwd)
    line.set_width(line11, lwd1)

// Alerts

ABCD_bl_alert = ABCD_bl and not ABCD_bl[1] ? true : na
alertcondition(ABCD_bl_alert, title='ABCD bullish Alert', message='ABCD bullish Alert')

ABCD_br_alert = ABCD_br and not ABCD_br[1] ? true : na
alertcondition(ABCD_br_alert, title='ABCD bearish Alert', message='ABCD bearish Alert')

g_bl_alert = g_bl and not g_bl[1] ? true : na
alertcondition(g_bl_alert, title='Gartley bullish Alert', message='Gartley bullish Alert')

g_br_alert = g_br and not g_br[1] ? true : na
alertcondition(g_br_alert, title='Gartley bearish Alert', message='Gartley bearish Alert')

_5_bl_alert = _5_bl and not _5_bl[1] ? true : na
alertcondition(_5_bl_alert, title='[5-0] bullish Alert', message='[5-0] bullish Alert')

_5_br_alert = _5_br and not _5_br[1] ? true : na
alertcondition(_5_br_alert, title='[5-0] bearish Alert', message='[5-0] bearish Alert')

something = (g_bl and not g_bl[1]) or (g_br and not g_br[1]) or (ABCD_bl and not ABCD_bl[1]) or (ABCD_br and not ABCD_br[1]) or (_5_bl and not _5_bl[1]) or (_5_br and not _5_br[1]) ? true : na
alertcondition(something, title='"Something Alert"', message='"Something Alert" > Check chart!')


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
