// This source code is subject to the terms of the Mozilla Public License 2. at https://mozilla.org/MPL/2./
// Â© loxx

//@version=5
indicator("Fourier Extrapolator of Price w/ Projection Forecast [Loxx]", shorttitle = "FEPFP [Loxx]", overlay = true, max_lines_count = 500)

greencolor = #2DD204
redcolor = #D2042D

src = input.source(open, "Source")
npast = input.int(400, "Past Bars", maxval = 500)
nharm = input.int(20, "Harmonic Period", minval = 1)
frqtol = input.float(0.0001, "Frequency Tolerance")
nfut = input.int(100, "Forecast Bars")

x = array.new<float>(npast, 0.)
xm = array.new<float>(npast, 0.)
ym = array.new<float>(nfut + 1, 0.)

if npast + nfut > 500
    runtime.error("You must adjust nfut and npast so that they add up to 500 or less")


if barstate.islast
    av = 0.
    for i = 0 to npast - 1
        array.set(x, i, nz(src[i]))
        av += array.get(x, i)
    av /= npast

    //--- initialize model outputs
    for i = 0 to npast - 1
        array.set(xm, i, av)
        if (i <= nfut)
            array.set(ym, i,  av)

    beta = 0.
    alpha = 0.
    w = 0., m= 0., a= 0., b= 0.
    z = array.new<float>(npast, 0.)

    //--- fit trigonometric model and calculate predictions
    for harm = 1 to nharm
        //+------------------------------------------------------------------+
        //| Quinn and Fernandes algorithm for finding frequency              |
        //+------------------------------------------------------------------+
        alpha := 0.
        beta := 2.
        array.set(z, 0, array.get(x, 0) - array.get(xm, 0))
        while math.abs(alpha - beta) > frqtol
            alpha := beta
            array.set(z, 1, array.get(x, 1) - array.get(xm, 1) + alpha * array.get(z, 0))
            num = array.get(z, 0) * array.get(z, 1)
            den = array.get(z, 0) * array.get(z, 0)
            for i = 2 to npast - 1
                array.set(z, i, array.get(x, i) - array.get(xm, i) + alpha * array.get(z, i - 1) - array.get(z, i - 2))
                num += array.get(z, i - 1) * (array.get(z, i) + array.get(z, i - 2))
                den += array.get(z, i - 1) * array.get(z, i - 1)
            beta := num / den
        w := math.acos(beta / 2.)

        //+------------------------------------------------------------------+
        //| Least-squares fitting of trigonometric series                    |
        //+------------------------------------------------------------------+
        Sc = 0.,  Ss = 0., Scc = 0.
        Sss = 0., Scs = 0., Sx = 0.
        Sxc = 0., Sxs = 0., den = 0.
        n = npast
        for i = 0 to npast - 1
            c = math.cos(w * i)
            s = math.sin(w * i)
            dx = array.get(x, i) - array.get(xm, i)
            Sc += c
            Ss += s
            Scc += c * c
            Sss += s * s
            Scs += c * s
            Sx += dx
            Sxc += dx * c
            Sxs += dx * s
        Sc /= n
        Ss /= n
        Scc /= n
        Sss /= n
        Scs /= n
        Sx /= n
        Sxc /= n
        Sxs /= n
        if (w == 0.)
            m := Sx
            a := 0.
            b := 0.
        else
            den := math.pow(Scs - Sc * Ss, 2) - (Scc - Sc * Sc) * (Sss - Ss * Ss)
            a := ((Sxs - Sx * Ss) * (Scs - Sc * Ss) - (Sxc - Sx * Sc) * (Sss - Ss * Ss)) / den
            b := ((Sxc - Sx * Sc) * (Scs - Sc * Ss) - (Sxs - Sx * Ss) * (Scc - Sc * Sc)) / den
            m := Sx - a * Sc - b * Ss

        for i = 0 to  npast - 1
            array.set(xm, i, array.get(xm, i) + m + a * math.cos(w * i) + b * math.sin(w * i))
            if (i <= nfut)
                array.set(ym, nfut - i, array.get(ym, nfut - i) + m + a * math.cos(w * i) - b * math.sin(w * i))

    for i = 0 to array.size(xm) - 1
        colorout = i < array.size(xm)-2 ? array.get(xm, i) > array.get(xm, i + 1) ? greencolor : redcolor : na
        line1 = line.new(bar_index - i + 1, array.get(xm, i), bar_index - i, array.get(xm, i), width=7, color=colorout, style=line.style_dotted)

    array.reverse(ym)
    for i = 0 to nfut -1
        colorout = i < array.size(ym)-2 ? array.get(ym, i) > array.get(ym, i + 1) ? color.fuchsia : color.yellow : na
        line12 = line.new(bar_index + i + 1, array.get(ym, i), bar_index + i, array.get(ym, i), width=7, color=colorout, style=line.style_dotted)
