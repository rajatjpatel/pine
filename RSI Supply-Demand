//@version=4
study(title="RSI Supply/Demand", shorttitle="RSI S/D", max_bars_back = 3000, max_labels_count=100, max_lines_count=100, overlay=true)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ShowYesterdaysHLC      = input(defval=true, title = 'Yesterdays High, Low, Close',  group = "High - Low - Close - Extensions")
ShowLastWeeksHLC       = input(defval=true, title = 'Last Weeks High, Low, Close',  group = "High - Low - Close - Extensions")
ShowLastMonthsHLC      = input(defval=true, title = 'Last Months High, Low, Close', group = "High - Low - Close - Extensions")


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


ShowVB       = input(true, "Volume Based S/D",                 group = "Volume Based Supply Demand")

VBlength     = input(20, title="Volume MA Length", minval=1,   group = "Volume Based Supply Demand")
VBTreshold   = input(5,  title="Volume Threshold",             group = "Volume Based Supply Demand")

VBDColorIn   = input(color.new(color.orange, 80), "Fill Color", type = input.color, group = "Volume Based Supply Demand")

VBchange     = volume/volume[1] - 1
VBstdev      = stdev(VBchange, VBlength)
VBdifference = VBchange / VBstdev[1]

VBzero       = 0
VBsignal     = abs(VBdifference)

VBleveluphi = valuewhen(VBsignal > VBTreshold,high[1],0)
VBleveluplo = valuewhen(VBsignal > VBTreshold,low[1],0)

//plot(UpperTreshold, color=black)
VBp1 = plot(ShowVB? VBleveluphi : na,style=plot.style_cross,color=color.orange, title="Volume Supply Demand - High")
VBp2 = plot(ShowVB? VBleveluplo : na,style=plot.style_cross,color=color.orange, title="Volume Supply Demand - Low")
fill(VBp1,VBp2,color=VBDColorIn, title="Volume Supply Demand - Fill")
//plot(abs(sigma), color = palette, style=columns, title="Volume", transp=65)

////////////////////////////////////////////////////////

PriceInVolSDSDZone     = (close <= VBleveluphi) and (close >= VBleveluplo) and (VBleveluphi == VBleveluphi[1])
PriceEntersVolSDSDZone = (PriceInVolSDSDZone and not PriceInVolSDSDZone[1])

alertcondition(PriceEntersVolSDSDZone,   title='-Price Enters Volume S/D Zone',    message='Price Enters Volume S/D Zone - RSI S/D')

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ShowSD1    = input(true, "Supply Demand Zone", group = "RSI Based Supply Demand 1", inline = "RSI Based Supply Demand 1")
ShowSZ1    = input(false, "Support Zone",       group = "RSI Based Supply Demand 1", inline = "RSI Based Supply Demand 1")
ShowRZ1    = input(false, "Resistance Zone",    group = "RSI Based Supply Demand 1", inline = "RSI Based Supply Demand 1")

RSI1Length = input(5, minval=1, title="RSI 1 Length",                                                                            group="RSI Based Supply Demand 1")
RSI1OBOSIn = input(defval="70 / 30", title="OB / OS", options=["70 / 30", "75 / 25", "80 / 20", "85 / 15", "90 / 10", "95 / 5"], group="RSI Based Supply Demand 1")
NumberOfConfirmationBarsRSI1 = input(3, title="Confirmation Bars",                                                               group="RSI Based Supply Demand 1")

RSI1SDColorIn          = input(color.new(color.aqua, 88), "Fill Colors - Supply Demand", type = input.color, group="RSI Based Supply Demand 1", inline = "Fill 1")
RSI1SupportColorIn     = input(color.new(color.lime, 92), "Support",                     type = input.color, group="RSI Based Supply Demand 1", inline = "Fill 1")
RSI1ResistanceColorIn  = input(color.new(color.red,  92), "Resistance",                  type = input.color, group="RSI Based Supply Demand 1", inline = "Fill 1")


RSI1       = rsi(close, RSI1Length)

RSI1OB = RSI1OBOSIn == "70 / 30" ? 70 :
   RSI1OBOSIn == "75 / 25" ? 75 : RSI1OBOSIn == "80 / 20" ? 80 :
   RSI1OBOSIn == "90 / 10" ? 90 : RSI1OBOSIn == "95 / 5" ? 95 : 100
RSI1OS = RSI1OBOSIn == "70 / 30" ? 30 :
   RSI1OBOSIn == "75 / 25" ? 25 : RSI1OBOSIn == "80 / 20" ? 20 :
   RSI1OBOSIn == "90 / 10" ? 10 : RSI1OBOSIn == "95 / 5" ? 5 : 0


RSI1incrementer_up   = RSI1 > RSI1OB ? 1 : 0
RSI1incrementer_down = RSI1 < RSI1OS ? 1 : 0
RSI1incrementer_both = RSI1 > RSI1OB or RSI1 < RSI1OS ? 1 : 0


RSI1rsx = 0


if RSI1incrementer_both
    RSI1rsx := nz(RSI1rsx[1], 0) + RSI1incrementer_both
    RSI1rsx
else
    RSI1rsx = 0
    RSI1rsx

RSI1rxH = if RSI1rsx >= NumberOfConfirmationBarsRSI1
    RSI1x = high
    RSI1x
RSI1rxL = if RSI1rsx >= NumberOfConfirmationBarsRSI1
    RSI1y = low
    RSI1y

RSI1rH = fixnan(RSI1rxH)
RSI1rL = fixnan(RSI1rxL)


///////////////////////////////////////////////////////


RSI1rsu = 0


if RSI1incrementer_up
    RSI1rsu := nz(RSI1rsu[1], 0) + RSI1incrementer_up
    RSI1rsu
else
    RSI1rsu = 0
    RSI1rsu


RSI1rssH = if RSI1rsu >= NumberOfConfirmationBarsRSI1
    RSI1x = high
    RSI1x


RSI1rssL = if RSI1rsu >= NumberOfConfirmationBarsRSI1
    RSI1y = low
    RSI1y

RSI1ResistanceZoneHigh = fixnan(RSI1rssH)
RSI1ResistanceZoneLow  = fixnan(RSI1rssL)


////////////////////////////////////////////////////////


RSI1rsd = 0


if RSI1incrementer_down
    RSI1rsd := nz(RSI1rsd[1], 0) + RSI1incrementer_down
    RSI1rsd
else
    RSI1rsd = 0
    RSI1rsd

RSI1rsrH = if RSI1rsd >= NumberOfConfirmationBarsRSI1
    RSI1x = high
    RSI1x

RSI1rsrL = if RSI1rsd >= NumberOfConfirmationBarsRSI1
    RSI1y = low
    RSI1y


RSI1SupportZoneHigh = fixnan(RSI1rsrH)
RSI1SupportZoneLow  = fixnan(RSI1rsrL)


////////////////////////////////////////////////////////

RSI1_ResZoneColor = RSI1ResistanceZoneHigh !=  RSI1ResistanceZoneHigh[1] ?  na : RSI1ResistanceColorIn
RSI1_SupZoneColor = RSI1SupportZoneLow     !=  RSI1SupportZoneLow[1]     ?  na : RSI1SupportColorIn

RSI1SDColor       = RSI1rH != RSI1rH[1]?                                    na : RSI1SDColorIn

////////////////////////////////////////////////////////

RSI1RZHigh = plot(ShowRZ1 ? RSI1ResistanceZoneHigh : na, style=plot.style_cross, title="RSI Resistance Zone - 1 - High", transp=100)
RSI1RZLow  = plot(ShowRZ1 ? RSI1ResistanceZoneLow  : na, style=plot.style_cross, title="RSI Resistance Zone - 1 - Low",  transp=100)
fill(RSI1RZHigh, RSI1RZLow, color=RSI1_ResZoneColor, title="RSI Support Zone - 1 - Fill")

RSI1SZHigh = plot(ShowSZ1 ? RSI1SupportZoneHigh    : na, style=plot.style_cross,    title="RSI Support Zone - 1 - High", transp=100)
RSI1SZLow  = plot(ShowSZ1 ? RSI1SupportZoneLow     : na, style=plot.style_cross,    title="RSI Support Zone - 1 - Low",  transp=100)
fill(RSI1SZHigh, RSI1SZLow, color=RSI1_SupZoneColor, title="RSI Support Zone - 1 - Fill")


PlotRSI1rH = plot(ShowSD1 ? RSI1rH : na,  style=plot.style_cross, linewidth=1, title="RSI Supply Demand - 1 - High")
PlotRSI1rL = plot(ShowSD1 ? RSI1rL : na,  style=plot.style_cross, linewidth=1, title="RSI Supply Demand - 1 - Low")
fill(PlotRSI1rH, PlotRSI1rL, color=RSI1SDColor, title="RSI Supply Demand - 1 - Fill")

////////////////////////////////////////////////////////

PriceInRSI1SDZone     = (close <= RSI1rH) and (close >= RSI1rL) and (RSI1rH == RSI1rH[1])
PriceEntersRSI1SDZone = (PriceInRSI1SDZone and not PriceInRSI1SDZone[1])

alertcondition(PriceEntersRSI1SDZone,   title='Price Enters RSI S/D Zone 1',    message='Price Enters RSI S/D Zone 1 - RSI S/D')


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


ShowSD2    = input(true,  "Supply Demand Zone", group = "RSI Based Supply Demand 2", inline = "RSI Based Supply Demand 2")
ShowSZ2    = input(false, "Support Zone",       group = "RSI Based Supply Demand 2", inline = "RSI Based Supply Demand 2")
ShowRZ2    = input(false, "Resistance Zone",    group = "RSI Based Supply Demand 2", inline = "RSI Based Supply Demand 2")

RSI2Length  = input(10, minval=1, title="RSI 2 Length",                                                                           group="RSI Based Supply Demand 2")
RSI2OBOSIn  = input(defval="70 / 30", title="OB / OS", options=["70 / 30", "75 / 25", "80 / 20", "85 / 15", "90 / 10", "95 / 5"], group="RSI Based Supply Demand 2")
NumberOfConfirmationBarsRSI2 = input(3, title="Confirmation Bars",                                                                group="RSI Based Supply Demand 2")

RSI2SDColorIn          = input(color.new(color.blue, 85), "Fill Colors - Supply Demand", type = input.color, group="RSI Based Supply Demand 2", inline = "Fill 2")
RSI2SupportColorIn     = input(color.new(color.lime, 92), "Support",                     type = input.color, group="RSI Based Supply Demand 2", inline = "Fill 2")
RSI2ResistanceColorIn  = input(color.new(color.red,  92), "Resistance",                  type = input.color, group="RSI Based Supply Demand 2", inline = "Fill 2")


RSI2       = rsi(close, RSI2Length)

RSI2OB = RSI2OBOSIn == "70 / 30" ? 70 :
   RSI2OBOSIn == "75 / 25" ? 75 : RSI2OBOSIn == "80 / 20" ? 80 :
   RSI2OBOSIn == "90 / 10" ? 90 : RSI2OBOSIn == "95 / 5" ? 95 : 100
RSI2OS = RSI2OBOSIn == "70 / 30" ? 30 :
   RSI2OBOSIn == "75 / 25" ? 25 : RSI2OBOSIn == "80 / 20" ? 20 :
   RSI2OBOSIn == "90 / 10" ? 10 : RSI2OBOSIn == "95 / 5" ? 5 : 0


RSI2incrementer_up   = RSI2 > RSI2OB ? 1 : 0
RSI2incrementer_down = RSI2 < RSI2OS ? 1 : 0
RSI2incrementer_both = RSI2 > RSI2OB or RSI2 < RSI2OS ? 1 : 0


RSI2rsx = 0


if RSI2incrementer_both
    RSI2rsx := nz(RSI2rsx[1], 0) + RSI2incrementer_both
    RSI2rsx
else
    RSI2rsx = 0
    RSI2rsx

RSI2rxH = if RSI2rsx >= NumberOfConfirmationBarsRSI2
    RSI2x = high
    RSI2x
RSI2rxL = if RSI2rsx >= NumberOfConfirmationBarsRSI2
    RSI2y = low
    RSI2y

RSI2rH = fixnan(RSI2rxH)
RSI2rL = fixnan(RSI2rxL)



///////////////////////////////////////////////////////


RSI2rsu = 0


if RSI2incrementer_up
    RSI2rsu := nz(RSI2rsu[1], 0) + RSI2incrementer_up
    RSI2rsu
else
    RSI2rsu = 0
    RSI2rsu


RSI2rssH = if RSI2rsu >= NumberOfConfirmationBarsRSI2
    RSI2x = high
    RSI2x


RSI2rssL = if RSI2rsu >= NumberOfConfirmationBarsRSI2
    RSI2y = low
    RSI2y

RSI2ResistanceZoneHigh = fixnan(RSI2rssH)
RSI2ResistanceZoneLow  = fixnan(RSI2rssL)


////////////////////////////////////////////////////////


RSI2rsd = 0


if RSI2incrementer_down
    RSI2rsd := nz(RSI2rsd[1], 0) + RSI2incrementer_down
    RSI2rsd
else
    RSI2rsd = 0
    RSI2rsd

RSI2rsrH = if RSI2rsd >= NumberOfConfirmationBarsRSI2
    RSI2x = high
    RSI2x

RSI2rsrL = if RSI2rsd >= NumberOfConfirmationBarsRSI2
    RSI2y = low
    RSI2y


RSI2SupportZoneHigh = fixnan(RSI2rsrH)
RSI2SupportZoneLow  = fixnan(RSI2rsrL)


////////////////////////////////////////////////////////

RSI2_ResZoneColor = RSI2ResistanceZoneHigh !=  RSI2ResistanceZoneHigh[1] ?  na : RSI2ResistanceColorIn
RSI2_SupZoneColor = RSI2SupportZoneLow     !=  RSI2SupportZoneLow[1]     ?  na : RSI2SupportColorIn

RSI2SDColor       = RSI2rH != RSI2rH[1]?                                    na : RSI2SDColorIn

////////////////////////////////////////////////////////


RSI2RZHigh = plot(ShowRZ2 ? RSI2ResistanceZoneHigh : na, style=plot.style_cross, title="RSI Resistance Zone - 2 - High", transp=100)
RSI2RZLow  = plot(ShowRZ2 ? RSI2ResistanceZoneLow  : na, style=plot.style_cross, title="RSI Resistance Zone - 2 - Low",  transp=100)
fill(RSI2RZHigh, RSI2RZLow, color=RSI2_ResZoneColor, title="RSI Support Zone - 2 - Fill")

RSI2SZHigh = plot(ShowSZ2 ? RSI2SupportZoneHigh    : na, style=plot.style_cross,    title="RSI Support Zone - 2 - High", transp=100)
RSI2SZLow  = plot(ShowSZ2 ? RSI2SupportZoneLow     : na, style=plot.style_cross,    title="RSI Support Zone - 2 - Low",  transp=100)
fill(RSI2SZHigh, RSI2SZLow, color=RSI2_SupZoneColor, title="RSI Support Zone - 2 - Fill")


PlotRSI2rH = plot(ShowSD2 ? RSI2rH : na,  style=plot.style_cross, linewidth=1, title="RSI Supply Demand - 2 - High")
PlotRSI2rL = plot(ShowSD2 ? RSI2rL : na,  style=plot.style_cross, linewidth=1, title="RSI Supply Demand - 2 - Low")
fill(PlotRSI2rH, PlotRSI2rL, color=RSI2SDColor, title="RSI Supply Demand - 2 - Fill")

////////////////////////////////////////////////////////

PriceInRSI2SDZone     = (close <= RSI2rH) and (close >= RSI2rL) and (RSI2rH == RSI2rH[1])
PriceEntersRSI2SDZone = (PriceInRSI2SDZone and not PriceInRSI2SDZone[1])

alertcondition(PriceEntersRSI2SDZone,   title='Price Enters RSI S/D Zone 2',    message='Price Enters RSI S/D Zone 2 - RSI S/D')


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


ShowSD3    = input(true,  "Supply Demand Zone", group = "RSI Based Supply Demand 3", inline = "RSI Based Supply Demand 3")
ShowSZ3    = input(false, "Support Zone",       group = "RSI Based Supply Demand 3", inline = "RSI Based Supply Demand 3")
ShowRZ3    = input(false, "Resistance Zone",    group = "RSI Based Supply Demand 3", inline = "RSI Based Supply Demand 3")

RSI3Length  = input(14,  minval=1, title="RSI 3 Length",                                                                          group="RSI Based Supply Demand 3")
RSI3OBOSIn  = input(defval="70 / 30", title="OB / OS", options=["70 / 30", "75 / 25", "80 / 20", "85 / 15", "90 / 10", "95 / 5"], group="RSI Based Supply Demand 3")
NumberOfConfirmationBarsRSI3 = input(3, title="Confirmation Bars",                                                                group="RSI Based Supply Demand 3")

RSI3SDColorIn          = input(color.new(color.blue, 85), "Fill Colors - Supply Demand", type = input.color, group="RSI Based Supply Demand 3", inline = "Fill 3")
RSI3SupportColorIn     = input(color.new(color.lime, 92), "Support",                     type = input.color, group="RSI Based Supply Demand 3", inline = "Fill 3")
RSI3ResistanceColorIn  = input(color.new(color.red,  92), "Resistance",                  type = input.color, group="RSI Based Supply Demand 3", inline = "Fill 3")


RSI3       = rsi(close, RSI3Length)

RSI3OB = RSI3OBOSIn == "70 / 30" ? 70 :
   RSI3OBOSIn == "75 / 25" ? 75 : RSI3OBOSIn == "80 / 20" ? 80 :
   RSI3OBOSIn == "90 / 10" ? 90 : RSI3OBOSIn == "95 / 5" ? 95 : 100
RSI3OS = RSI3OBOSIn == "70 / 30" ? 30 :
   RSI3OBOSIn == "75 / 25" ? 25 : RSI3OBOSIn == "80 / 20" ? 20 :
   RSI3OBOSIn == "90 / 10" ? 10 : RSI3OBOSIn == "95 / 5" ? 5 : 0


RSI3incrementer_up   = RSI3 > RSI3OB ? 1 : 0
RSI3incrementer_down = RSI3 < RSI3OS ? 1 : 0
RSI3incrementer_both = RSI3 > RSI3OB or RSI3 < RSI3OS ? 1 : 0


RSI3rsx = 0


if RSI3incrementer_both
    RSI3rsx := nz(RSI3rsx[1], 0) + RSI3incrementer_both
    RSI3rsx
else
    RSI3rsx = 0
    RSI3rsx

RSI3rxH = if RSI3rsx >= NumberOfConfirmationBarsRSI3
    RSI3x = high
    RSI3x
RSI3rxL = if RSI3rsx >= NumberOfConfirmationBarsRSI3
    RSI3y = low
    RSI3y

RSI3rH = fixnan(RSI3rxH)
RSI3rL = fixnan(RSI3rxL)



///////////////////////////////////////////////////////


RSI3rsu = 0


if RSI3incrementer_up
    RSI3rsu := nz(RSI3rsu[1], 0) + RSI3incrementer_up
    RSI3rsu
else
    RSI3rsu = 0
    RSI3rsu


RSI3rssH = if RSI3rsu >= NumberOfConfirmationBarsRSI3
    RSI3x = high
    RSI3x


RSI3rssL = if RSI3rsu >= NumberOfConfirmationBarsRSI3
    RSI3y = low
    RSI3y

RSI3ResistanceZoneHigh = fixnan(RSI3rssH)
RSI3ResistanceZoneLow  = fixnan(RSI3rssL)


////////////////////////////////////////////////////////


RSI3rsd = 0


if RSI3incrementer_down
    RSI3rsd := nz(RSI3rsd[1], 0) + RSI3incrementer_down
    RSI3rsd
else
    RSI3rsd = 0
    RSI3rsd

RSI3rsrH = if RSI3rsd >= NumberOfConfirmationBarsRSI3
    RSI3x = high
    RSI3x

RSI3rsrL = if RSI3rsd >= NumberOfConfirmationBarsRSI3
    RSI3y = low
    RSI3y


RSI3SupportZoneHigh = fixnan(RSI3rsrH)
RSI3SupportZoneLow  = fixnan(RSI3rsrL)


////////////////////////////////////////////////////////

RSI3_ResZoneColor = RSI3ResistanceZoneHigh !=  RSI3ResistanceZoneHigh[1] ?  na : RSI3ResistanceColorIn
RSI3_SupZoneColor = RSI3SupportZoneLow     !=  RSI3SupportZoneLow[1]     ?  na : RSI3SupportColorIn

RSI3SDColor       = RSI3rH != RSI3rH[1]?                                    na : RSI3SDColorIn

////////////////////////////////////////////////////////


RSI3RZHigh = plot(ShowRZ3 ? RSI3ResistanceZoneHigh : na, style=plot.style_cross, title="RSI Resistance Zone - 3 - High", transp=100)
RSI3RZLow  = plot(ShowRZ3 ? RSI3ResistanceZoneLow  : na, style=plot.style_cross, title="RSI Resistance Zone - 3 - Low",  transp=100)
fill(RSI3RZHigh, RSI3RZLow, color=RSI3_ResZoneColor, title="RSI Support Zone - 3 - Fill")

RSI3SZHigh = plot(ShowSZ3 ? RSI3SupportZoneHigh    : na, style=plot.style_cross,    title="RSI Support Zone - 3 - High", transp=100)
RSI3SZLow  = plot(ShowSZ3 ? RSI3SupportZoneLow     : na, style=plot.style_cross,    title="RSI Support Zone - 3 - Low",  transp=100)
fill(RSI3SZHigh, RSI3SZLow, color=RSI3_SupZoneColor, title="RSI Support Zone - 3 - Fill")


PlotRSI3rH = plot(ShowSD3 ? RSI3rH : na,  style=plot.style_cross, linewidth=1, title="RSI Supply Demand - 3 - High")
PlotRSI3rL = plot(ShowSD3 ? RSI3rL : na,  style=plot.style_cross, linewidth=1, title="RSI Supply Demand - 3 - Low")
fill(PlotRSI3rH, PlotRSI3rL, color=RSI3SDColor, title="RSI Supply Demand - 3 - Fill")

////////////////////////////////////////////////////////

PriceInRSI3SDZone     = (close <= RSI3rH) and (close >= RSI3rL) and (RSI3rH == RSI3rH[1])
PriceEntersRSI3SDZone = (PriceInRSI3SDZone and not PriceInRSI3SDZone[1])

alertcondition(PriceEntersRSI3SDZone,   title='Price Enters RSI S/D Zone 3',    message='Price Enters RSI S/D Zone 3 - RSI S/D')


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


ShowSD4    = input(true,  "Supply Demand Zone", group = "RSI Based Supply Demand 4", inline = "RSI Based Supply Demand 4")
ShowSZ4    = input(false, "Support Zone",       group = "RSI Based Supply Demand 4", inline = "RSI Based Supply Demand 4")
ShowRZ4    = input(false, "Resistance Zone",    group = "RSI Based Supply Demand 4", inline = "RSI Based Supply Demand 4")

RSI4Length  = input(21,  minval=1, title="RSI 4 Length",                                                                          group="RSI Based Supply Demand 4")
RSI4OBOSIn  = input(defval="70 / 30", title="OB / OS", options=["70 / 30", "75 / 25", "80 / 20", "85 / 15", "90 / 10", "95 / 5"], group="RSI Based Supply Demand 4")
NumberOfConfirmationBarsRSI4 = input(3, title="Confirmation Bars",                                                                group="RSI Based Supply Demand 4")

RSI4SDColorIn          = input(color.new(color.blue, 85), "Fill Colors - Supply Demand", type = input.color, group="RSI Based Supply Demand 4", inline = "Fill 4")
RSI4SupportColorIn     = input(color.new(color.lime, 92), "Support",                     type = input.color, group="RSI Based Supply Demand 4", inline = "Fill 4")
RSI4ResistanceColorIn  = input(color.new(color.red,  92), "Resistance",                  type = input.color, group="RSI Based Supply Demand 4", inline = "Fill 4")


RSI4       = rsi(close, RSI4Length)

RSI4OB = RSI4OBOSIn == "70 / 30" ? 70 :
   RSI4OBOSIn == "75 / 25" ? 75 : RSI4OBOSIn == "80 / 20" ? 80 :
   RSI4OBOSIn == "90 / 10" ? 90 : RSI4OBOSIn == "95 / 5" ? 95 : 100
RSI4OS = RSI4OBOSIn == "70 / 30" ? 30 :
   RSI4OBOSIn == "75 / 25" ? 25 : RSI4OBOSIn == "80 / 20" ? 20 :
   RSI4OBOSIn == "90 / 10" ? 10 : RSI4OBOSIn == "95 / 5" ? 5 : 0


RSI4incrementer_up   = RSI4 > RSI4OB ? 1 : 0
RSI4incrementer_down = RSI4 < RSI4OS ? 1 : 0
RSI4incrementer_both = RSI4 > RSI4OB or RSI4 < RSI4OS ? 1 : 0


RSI4rsx = 0


if RSI4incrementer_both
    RSI4rsx := nz(RSI4rsx[1], 0) + RSI4incrementer_both
    RSI4rsx
else
    RSI4rsx = 0
    RSI4rsx

RSI4rxH = if RSI4rsx >= NumberOfConfirmationBarsRSI4
    RSI4x = high
    RSI4x
RSI4rxL = if RSI4rsx >= NumberOfConfirmationBarsRSI4
    RSI4y = low
    RSI4y

RSI4rH = fixnan(RSI4rxH)
RSI4rL = fixnan(RSI4rxL)



///////////////////////////////////////////////////////


RSI4rsu = 0


if RSI4incrementer_up
    RSI4rsu := nz(RSI4rsu[1], 0) + RSI4incrementer_up
    RSI4rsu
else
    RSI4rsu = 0
    RSI4rsu


RSI4rssH = if RSI4rsu >= NumberOfConfirmationBarsRSI4
    RSI4x = high
    RSI4x


RSI4rssL = if RSI4rsu >= NumberOfConfirmationBarsRSI4
    RSI4y = low
    RSI4y

RSI4ResistanceZoneHigh = fixnan(RSI4rssH)
RSI4ResistanceZoneLow  = fixnan(RSI4rssL)


////////////////////////////////////////////////////////


RSI4rsd = 0


if RSI4incrementer_down
    RSI4rsd := nz(RSI4rsd[1], 0) + RSI4incrementer_down
    RSI4rsd
else
    RSI4rsd = 0
    RSI4rsd

RSI4rsrH = if RSI4rsd >= NumberOfConfirmationBarsRSI4
    RSI4x = high
    RSI4x

RSI4rsrL = if RSI4rsd >= NumberOfConfirmationBarsRSI4
    RSI4y = low
    RSI4y


RSI4SupportZoneHigh = fixnan(RSI4rsrH)
RSI4SupportZoneLow  = fixnan(RSI4rsrL)


////////////////////////////////////////////////////////

RSI4_ResZoneColor = RSI4ResistanceZoneHigh !=  RSI4ResistanceZoneHigh[1] ?  na : RSI4ResistanceColorIn
RSI4_SupZoneColor = RSI4SupportZoneLow     !=  RSI4SupportZoneLow[1]     ?  na : RSI4SupportColorIn

RSI4SDColor       = RSI4rH != RSI4rH[1]?                                    na : RSI4SDColorIn

////////////////////////////////////////////////////////

RSI4RZHigh = plot(ShowRZ4 ? RSI4ResistanceZoneHigh : na, style=plot.style_cross, title="RSI Resistance Zone - 4 - High", transp=100)
RSI4RZLow  = plot(ShowRZ4 ? RSI4ResistanceZoneLow  : na, style=plot.style_cross, title="RSI Resistance Zone - 4 - Low",  transp=100)
fill(RSI4RZHigh, RSI4RZLow, color=RSI4_ResZoneColor, title="RSI Support Zone - 4 - Fill")

RSI4SZHigh = plot(ShowSZ4 ? RSI4SupportZoneHigh    : na, style=plot.style_cross,    title="RSI Support Zone - 4 - High", transp=100)
RSI4SZLow  = plot(ShowSZ4 ? RSI4SupportZoneLow     : na, style=plot.style_cross,    title="RSI Support Zone - 4 - Low",  transp=100)
fill(RSI4SZHigh, RSI4SZLow, color=RSI4_SupZoneColor, title="RSI Support Zone - 4 - Fill")


PlotRSI4rH = plot(ShowSD4 ? RSI4rH : na,  style=plot.style_cross, linewidth=1, title="RSI Supply Demand - 4 - High")
PlotRSI4rL = plot(ShowSD4 ? RSI4rL : na,  style=plot.style_cross, linewidth=1, title="RSI Supply Demand - 4 - Low")
fill(PlotRSI4rH, PlotRSI4rL, color=RSI4SDColor, title="RSI Supply Demand - 4 - Fill")

////////////////////////////////////////////////////////

PriceInRSI4SDZone     = (close <= RSI4rH) and (close >= RSI4rL) and (RSI4rH == RSI4rH[1])
PriceEntersRSI4SDZone = (PriceInRSI4SDZone and not PriceInRSI4SDZone[1])

alertcondition(PriceEntersRSI4SDZone,   title='Price Enters RSI S/D Zone 4',    message='Price Enters RSI S/D Zone 4 - RSI S/D')


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ShowSD5    = input(true, "Supply Demand Zone",  group = "RSI Based Supply Demand 5", inline = "Supply Demand 5")
ShowSZ5    = input(false, "Support Zone",       group = "RSI Based Supply Demand 5", inline = "Supply Demand 5")
ShowRZ5    = input(false, "Resistance Zone",    group = "RSI Based Supply Demand 5", inline = "Supply Demand 5")

RSI5Length = input(28, minval=1, title="RSI 5 Length",                                                                           group="RSI Based Supply Demand 5")
RSI5OBOSIn = input(defval="70 / 30", title="OB / OS", options=["70 / 30", "75 / 25", "80 / 20", "85 / 15", "90 / 10", "95 / 5"], group="RSI Based Supply Demand 5")
NumberOfConfirmationBarsRSI5 = input(3, title="Confirmation Bars",                                                               group="RSI Based Supply Demand 5")

RSI5SDColorIn          = input(color.new(color.navy, 84), "Fill Colors - Supply Demand", type = input.color, group="RSI Based Supply Demand 5", inline = "Fill 5")
RSI5SupportColorIn     = input(color.new(color.lime, 92), "Support",                     type = input.color, group="RSI Based Supply Demand 5", inline = "Fill 5")
RSI5ResistanceColorIn  = input(color.new(color.red,  92), "Resistance",                  type = input.color, group="RSI Based Supply Demand 5", inline = "Fill 5")


RSI5       = rsi(close, RSI5Length)

RSI5OB = RSI5OBOSIn == "70 / 30" ? 70 :
   RSI5OBOSIn == "75 / 25" ? 75 : RSI5OBOSIn == "80 / 20" ? 80 :
   RSI5OBOSIn == "90 / 10" ? 90 : RSI5OBOSIn == "95 / 5" ? 95 : 100
RSI5OS = RSI5OBOSIn == "70 / 30" ? 30 :
   RSI5OBOSIn == "75 / 25" ? 25 : RSI5OBOSIn == "80 / 20" ? 20 :
   RSI5OBOSIn == "90 / 10" ? 10 : RSI5OBOSIn == "95 / 5" ? 5 : 0


RSI5incrementer_up   = RSI5 > RSI5OB ? 1 : 0
RSI5incrementer_down = RSI5 < RSI5OS ? 1 : 0
RSI5incrementer_both = RSI5 > RSI5OB or RSI5 < RSI5OS ? 1 : 0


RSI5rsx = 0


if RSI5incrementer_both
    RSI5rsx := nz(RSI5rsx[1], 0) + RSI5incrementer_both
    RSI5rsx
else
    RSI5rsx = 0
    RSI5rsx

RSI5rxH = if RSI5rsx >= NumberOfConfirmationBarsRSI5
    RSI5x = high
    RSI5x
RSI5rxL = if RSI5rsx >= NumberOfConfirmationBarsRSI5
    RSI5y = low
    RSI5y

RSI5rH = fixnan(RSI5rxH)
RSI5rL = fixnan(RSI5rxL)


///////////////////////////////////////////////////////


RSI5rsu = 0


if RSI5incrementer_up
    RSI5rsu := nz(RSI5rsu[1], 0) + RSI5incrementer_up
    RSI5rsu
else
    RSI5rsu = 0
    RSI5rsu


RSI5rssH = if RSI5rsu >= NumberOfConfirmationBarsRSI5
    RSI5x = high
    RSI5x


RSI5rssL = if RSI5rsu >= NumberOfConfirmationBarsRSI5
    RSI5y = low
    RSI5y

RSI5ResistanceZoneHigh = fixnan(RSI5rssH)
RSI5ResistanceZoneLow  = fixnan(RSI5rssL)


////////////////////////////////////////////////////////


RSI5rsd = 0


if RSI5incrementer_down
    RSI5rsd := nz(RSI5rsd[1], 0) + RSI5incrementer_down
    RSI5rsd
else
    RSI5rsd = 0
    RSI5rsd

RSI5rsrH = if RSI5rsd >= NumberOfConfirmationBarsRSI5
    RSI5x = high
    RSI5x

RSI5rsrL = if RSI5rsd >= NumberOfConfirmationBarsRSI5
    RSI5y = low
    RSI5y


RSI5SupportZoneHigh = fixnan(RSI5rsrH)
RSI5SupportZoneLow  = fixnan(RSI5rsrL)


////////////////////////////////////////////////////////

RSI5_ResZoneColor = RSI5ResistanceZoneHigh !=  RSI5ResistanceZoneHigh[1] ?  na : RSI5ResistanceColorIn
RSI5_SupZoneColor = RSI5SupportZoneLow     !=  RSI5SupportZoneLow[1]     ?  na : RSI5SupportColorIn

RSI5SDColor       = RSI5rH != RSI5rH[1]?                                    na : RSI5SDColorIn

////////////////////////////////////////////////////////

RSI5RZHigh = plot(ShowRZ5 ? RSI5ResistanceZoneHigh : na, style=plot.style_cross, title="RSI Resistance Zone - 5 - High", color=RSI5_ResZoneColor, transp=1)
RSI5RZLow  = plot(ShowRZ5 ? RSI5ResistanceZoneLow  : na, style=plot.style_cross, title="RSI Resistance Zone - 5 - Low",  transp=100)
fill(RSI5RZHigh, RSI5RZLow, color=RSI5_ResZoneColor, title="RSI Support Zone - 1 - Fill")

RSI5SZHigh = plot(ShowSZ5 ? RSI5SupportZoneHigh    : na, style=plot.style_cross,    title="RSI Support Zone - 5 - High", transp=100)
RSI5SZLow  = plot(ShowSZ5 ? RSI5SupportZoneLow     : na, style=plot.style_cross,    title="RSI Support Zone - 5 - Low",  transp=100)
fill(RSI5SZHigh, RSI5SZLow, color=RSI5_SupZoneColor, title="RSI Support Zone - 1 - Fill")


PlotRSI5rH = plot(ShowSD5 ? RSI5rH : na,  style=plot.style_cross, linewidth=1, title="RSI Supply Demand - 5 - High")
PlotRSI5rL = plot(ShowSD5 ? RSI5rL : na,  style=plot.style_cross, linewidth=1, title="RSI Supply Demand - 5 - Low")
fill(PlotRSI5rH, PlotRSI5rL, color=RSI5SDColor, title="RSI Supply Demand - 5 - Fill")

////////////////////////////////////////////////////////

PriceInRSI5SDZone     = (close <= RSI5rH) and (close >= RSI5rL) and (RSI5rH == RSI5rH[1])
PriceEntersRSI5SDZone = (PriceInRSI5SDZone and not PriceInRSI5SDZone[1])

alertcondition(PriceEntersRSI5SDZone,                                                     title='Price Enters RSI S/D Zone 5',               message='Price Enters RSI S/D Zone 5 - RSI S/D')

alertcondition(PriceEntersRSI4SDZone or PriceEntersRSI5SDZone,                            title='Price Enters RSI S/D Zones 5 or 4',         message='Price Enters RSI S/D Zones 5 or 4  - RSI S/D')

alertcondition(PriceEntersRSI3SDZone or PriceEntersRSI4SDZone or PriceEntersRSI5SDZone,   title='Price Enters RSI S/D Zones 5 or 4 or 3',    message='Price Enters RSI S/D Zone 5 or 4 or 3 - RSI S/D')


alertcondition(PriceEntersRSI1SDZone or PriceEntersRSI2SDZone or PriceEntersRSI3SDZone or PriceEntersRSI4SDZone or PriceEntersRSI5SDZone,   title='Price Enters Any RSI S/D Zone',    message='Price Enters Any RSI S/D Zone - RSI S/D')


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Daily Weekly and Monthly High Low Close Extensions


// Function outputs 1 when it's the first bar of the D/W/M/Y
is_newbar(res) =>
    ch = 0
    if(res == '12M')
        t  = year(time('D'))
        ch := change(t) != 0 ? 1 : 0
    else
        t = time(res)
        ch := change(t) != 0 ? 1 : 0
    ch

// Rounding levels to min tick
nround(x) =>
    n = round(x / syminfo.mintick) * syminfo.mintick

////////////
// INPUTS //
////////////


DailyAndWeeklyHLCCandleTypeInput = "Adaptive - Automatically Adapts to Standard or HA Candles" // input(title = 'Calculate According To Candle Type - Daily and Weekly HLC', defval = "Standard",  options = ["Standard", "Heikin Ashi", "Adaptive - Automatically Adapts to Standard or HA Candles"])


// HA    = heikinashi(syminfo.tickerid)
// NonHA = tickerid(syminfo.prefix, syminfo.ticker)

DailyAndWeeklyHLCCandleType = syminfo.tickerid // DailyAndWeeklyHLCCandleTypeInput=="Heikin Ashi" ? HA : DailyAndWeeklyHLCCandleTypeInput=="Standard" ? NonHA : syminfo.tickerid


////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MajBarsSinseYHLC = 0
MajBarsSinseYHLC := is_newbar("D") ? 0 : MajBarsSinseYHLC[1] + 1

DailyOrLess =  timeframe.isseconds or timeframe.isintraday or timeframe.isdaily and timeframe.multiplier < 2 ? 1 : 0


// Yesterdays High Low Close Calculations and Plots

//YHLCOpen  = security(DailyAndWeeklyHLCCandleType, 'D', open,  barmerge.gaps_off, barmerge.lookahead_on)
YHLCClose = security(DailyAndWeeklyHLCCandleType, 'D', close, barmerge.gaps_off, barmerge.lookahead_on)
YHLCHigh  = security(DailyAndWeeklyHLCCandleType, 'D', high,  barmerge.gaps_off, barmerge.lookahead_on)
YHLCLow   = security(DailyAndWeeklyHLCCandleType, 'D', low,   barmerge.gaps_off, barmerge.lookahead_on)


/////////////////////
// Get HLC from HT //

// Calc Open
// YHLCCurentOpen     = 0.0
// YHLCCurentOpen    := is_newbar('D') ? YHLCOpen           : YHLCCurentOpen[1]

// YHLCPreviousOpen   = 0.0
// YHLCPreviousOpen  := is_newbar('D') ? YHLCCurentOpen[1]  : YHLCPreviousOpen[1]

// Calc High
YHLCCurrentHigh    = 0.0
YHLCCurrentHigh   := is_newbar('D') ? YHLCHigh           : max(YHLCCurrentHigh[1], YHLCHigh)

YHLCPreviousHigh   = 0.0
YHLCPreviousHigh  := is_newbar('D') ? YHLCCurrentHigh[1] : YHLCPreviousHigh[1]

// Calc Low
YHLCCurrentLow     = 0.0
YHLCCurrentLow    := is_newbar('D') ? YHLCLow            : min(YHLCCurrentLow[1], YHLCLow)

YHLCPreviousLow    = 0.0
YHLCPreviousLow   := is_newbar('D') ? YHLCCurrentLow[1]  : YHLCPreviousLow[1]

// Calc Close
YHLCPreviousClose  = 0.0
YHLCPreviousClose := is_newbar('D') ? YHLCClose[1]       : YHLCPreviousClose[1]


// YCa = ShowYesterdaysHLC and DailyOrLess ? line.new(bar_index[min(MajBarsSinseYHLC, 300)], YHLCPreviousClose, bar_index, YHLCPreviousClose, color=color.blue,  style =  line.style_solid, extend = extend.right) : na
// YHa = ShowYesterdaysHLC and DailyOrLess ? line.new(bar_index[min(MajBarsSinseYHLC, 300)], YHLCPreviousHigh,  bar_index, YHLCPreviousHigh,  color=color.green, style =  line.style_solid, extend = extend.right) : na
// YLa = ShowYesterdaysHLC and DailyOrLess ? line.new(bar_index[min(MajBarsSinseYHLC, 300)], YHLCPreviousLow,   bar_index, YHLCPreviousLow,   color=color.red,   style =  line.style_solid, extend = extend.right) : na


// // delete previous lines in the same period
// //if (not is_newbar(pp_res)// or not show_historical_levels)
// line.delete(YCa[1])
// line.delete(YHa[1])
// line.delete(YLa[1])


/////////////////////////////////////////////////////////////////////////////////

var int YHLCTimeFromCalcA = 0
var int YHLCTimeToCalcA   = 0

if change(time("D"))
    YHLCTimeFromCalcA    := bar_index[1]
    YHLCTimeToCalcA      := bar_index

YHLCTimeFromCalcB         = bar_index[min(MajBarsSinseYHLC, 300)]
YHLCTimeToCalcB           = bar_index

YHLCTimeFrom              = timeframe.isintraday ? YHLCTimeFromCalcB : YHLCTimeFromCalcA
YHLCTimeTo                = timeframe.isintraday ? YHLCTimeToCalcB   : YHLCTimeToCalcA

YHLCLineWidth             = 2       // MajLineStyleIn=="Dotted" ? MajLineWidthIn : MajLineWidthIn + 1


YCb = ShowYesterdaysHLC and DailyOrLess ? line.new(YHLCTimeFrom, YHLCPreviousClose, YHLCTimeTo, YHLCPreviousClose, color=color.blue,  style =  line.style_solid, extend = extend.right, width=YHLCLineWidth) : na
YHb = ShowYesterdaysHLC and DailyOrLess ? line.new(YHLCTimeFrom, YHLCPreviousHigh,  YHLCTimeTo, YHLCPreviousHigh,  color=color.green, style =  line.style_solid, extend = extend.right, width=YHLCLineWidth) : na
YLb = ShowYesterdaysHLC and DailyOrLess ? line.new(YHLCTimeFrom, YHLCPreviousLow,   YHLCTimeTo, YHLCPreviousLow,   color=color.red,   style =  line.style_solid, extend = extend.right, width=YHLCLineWidth) : na


// delete previous lines in the same period
//if (not is_newbar(pp_res)// or not show_historical_levels)
line.delete(YCb[1])
line.delete(YHb[1])
line.delete(YLb[1])


alertcondition(not is_newbar('D') and cross(close,      YHLCPreviousClose), "Price is Crossing Yesterday's Close",       "Crossing Yesterdays Close")
// alertcondition(not is_newbar(MajPivotPointResolution) and crossover(close,  YHLCPreviousClose), "Crossover Yesterdays Close",   "Crossover Yesterdays Close")
// alertcondition(not is_newbar(MajPivotPointResolution) and crossunder(close, YHLCPreviousClose), "Crossunder Yesterdays Close",  "Crossunder Yesterdays Close")

alertcondition(not is_newbar('D') and cross(close,      YHLCPreviousHigh),  "Price is Crossing Yesterday's High",        "Crossing Yesterdays High")
// alertcondition(not is_newbar(MajPivotPointResolution) and crossover(close,  YHLCPreviousHigh),  "Crossover Yesterdays High",    "Crossover Yesterdays High")
// alertcondition(not is_newbar(MajPivotPointResolution) and crossunder(close, YHLCPreviousHigh),  "Crossunder Yesterdays High",   "Crossunder Yesterdays High")

alertcondition(not is_newbar('D') and cross(close,      YHLCPreviousLow),   "Price is Crossing Yesterday's Low",         "Crossing Yesterdays Low")
// alertcondition(not is_newbar(MajPivotPointResolution) and crossover(close,  YHLCPreviousLow),   "Crossover Yesterdays Low",     "Crossover Yesterdays Low")
// alertcondition(not is_newbar(MajPivotPointResolution) and crossunder(close, YHLCPreviousLow),   "Crossunder Yesterdays Low",    "Crossunder Yesterdays Low")


////////////////////////////////////////////

MajBarsSinseLWHLC = 0
MajBarsSinseLWHLC := is_newbar("W") ? 0 : MajBarsSinseLWHLC[1] + 1

WeeklyOrLess =  timeframe.isseconds or timeframe.isintraday or timeframe.isdaily or timeframe.isweekly and timeframe.multiplier < 2 ? 1 : 0

// Last Weeks High Low Close Calculations and Plots

//LWHLCOpen  = security(DailyAndWeeklyHLCCandleType, 'W', open,  barmerge.gaps_off, barmerge.lookahead_on)
LWHLCClose = security(DailyAndWeeklyHLCCandleType, 'W', close, barmerge.gaps_off, barmerge.lookahead_on)
LWHLCHigh  = security(DailyAndWeeklyHLCCandleType, 'W', high,  barmerge.gaps_off, barmerge.lookahead_on)
LWHLCLow   = security(DailyAndWeeklyHLCCandleType, 'W', low,   barmerge.gaps_off, barmerge.lookahead_on)


/////////////////////
// Get HLC from HT //

// Calc Open
// LWHLCCurentOpen     = 0.0
// LWHLCCurentOpen    := is_newbar('W') ? LWHLCOpen           : LWHLCCurentOpen[1]

// LWHLCPreviousOpen   = 0.0
// LWHLCPreviousOpen  := is_newbar('W') ? LWHLCCurentOpen[1]  : LWHLCPreviousOpen[1]

// Calc High
LWHLCCurrentHigh    = 0.0
LWHLCCurrentHigh   := is_newbar('W') ? LWHLCHigh           : max(LWHLCCurrentHigh[1], LWHLCHigh)

LWHLCPreviousHigh   = 0.0
LWHLCPreviousHigh  := is_newbar('W') ? LWHLCCurrentHigh[1] : LWHLCPreviousHigh[1]

// Calc Low
LWHLCCurrentLow     = 0.0
LWHLCCurrentLow    := is_newbar('W') ? LWHLCLow            : min(LWHLCCurrentLow[1], LWHLCLow)

LWHLCPreviousLow    = 0.0
LWHLCPreviousLow   := is_newbar('W') ? LWHLCCurrentLow[1]  : LWHLCPreviousLow[1]

// Calc Close
LWHLCPreviousClose  = 0.0
LWHLCPreviousClose := is_newbar('W') ? LWHLCClose[1]       : LWHLCPreviousClose[1]


// LWCa = ShowLastWeeksHLC and WeeklyOrLess ? line.new(bar_index[min(MajBarsSinseLWHLC, 300)], LWHLCPreviousClose, bar_index, LWHLCPreviousClose, color=color.blue,  style =  line.style_solid, width = 2, extend = extend.right) : na
// LWHa = ShowLastWeeksHLC and WeeklyOrLess ? line.new(bar_index[min(MajBarsSinseLWHLC, 300)], LWHLCPreviousHigh,  bar_index, LWHLCPreviousHigh,  color=color.green, style =  line.style_solid, width = 2, extend = extend.right) : na
// LWLa = ShowLastWeeksHLC and WeeklyOrLess ? line.new(bar_index[min(MajBarsSinseLWHLC, 300)], LWHLCPreviousLow,   bar_index, LWHLCPreviousLow,   color=color.red,   style =  line.style_solid, width = 2, extend = extend.right) : na


// // delete previous lines in the same period
// //if (not is_newbar(pp_res)// or not show_historical_levels)
// line.delete(LWCa[1])
// line.delete(LWHa[1])
// line.delete(LWLa[1])

//////////////////////////////////////


var int LWHLCTimeFromCalcA = 0
var int LWHLCTimeToCalcA   = 0

if change(time("W"))
    LWHLCTimeFromCalcA    := bar_index[1]
    LWHLCTimeToCalcA      := bar_index

LWHLCTimeFromCalcB         = bar_index[min(MajBarsSinseLWHLC, 300)]
LWHLCTimeToCalcB           = bar_index

LWHLCTimeFrom              = timeframe.isintraday ? LWHLCTimeFromCalcB : LWHLCTimeFromCalcA
LWHLCTimeTo                = timeframe.isintraday ? LWHLCTimeToCalcB   : LWHLCTimeToCalcA

LWHLCLineWidth             = 3      //MajLineStyleIn=="Dotted" ? MajLineWidthIn + 1 : MajLineWidthIn + 2


LWCb = ShowLastWeeksHLC and WeeklyOrLess ? line.new(LWHLCTimeFrom, LWHLCPreviousClose, LWHLCTimeTo, LWHLCPreviousClose, color=color.blue,  style =  line.style_solid, extend = extend.right, width=LWHLCLineWidth) : na
LWHb = ShowLastWeeksHLC and WeeklyOrLess ? line.new(LWHLCTimeFrom, LWHLCPreviousHigh,  LWHLCTimeTo, LWHLCPreviousHigh,  color=color.green, style =  line.style_solid, extend = extend.right, width=LWHLCLineWidth) : na
LWLb = ShowLastWeeksHLC and WeeklyOrLess ? line.new(LWHLCTimeFrom, LWHLCPreviousLow,   LWHLCTimeTo, LWHLCPreviousLow,   color=color.red,   style =  line.style_solid, extend = extend.right, width=LWHLCLineWidth) : na


// delete previous lines in the same period
//if (not is_newbar(pp_res)// or not show_historical_levels)
line.delete(LWCb[1])
line.delete(LWHb[1])
line.delete(LWLb[1])


alertcondition(not is_newbar('W') and cross(close,      LWHLCPreviousClose), "Price is Crossing Last Week's Close",       "Crossing Last Weeks Close")
// alertcondition(not is_newbar(MajPivotPointResolution) and crossover(close,  LWHLCPreviousClose), "Crossover Yesterdays Close",   "Crossover Last Weeks Close")
// alertcondition(not is_newbar(MajPivotPointResolution) and crossunder(close, LWHLCPreviousClose), "Crossunder Yesterdays Close",  "Crossunder Last Weeks Close")

alertcondition(not is_newbar('W') and cross(close,      LWHLCPreviousHigh),  "Price is Crossing Last Week's High",        "Crossing Last Weeks High")
// alertcondition(not is_newbar(MajPivotPointResolution) and crossover(close,  LWHLCPreviousHigh),  "Crossover Yesterdays High",    "Crossover Last Weeks High")
// alertcondition(not is_newbar(MajPivotPointResolution) and crossunder(close, LWHLCPreviousHigh),  "Crossunder Yesterdays High",   "Crossunder Last Weeks High")

alertcondition(not is_newbar('W') and cross(close,      LWHLCPreviousLow),   "Price is Crossing Last Week's Low",         "Crossing Last Weeks Low")
// alertcondition(not is_newbar(MajPivotPointResolution) and crossover(close,  LWHLCPreviousLow),   "Crossover Yesterdays Low",     "Crossover Last Weeks Low")
// alertcondition(not is_newbar(MajPivotPointResolution) and crossunder(close, LWHLCPreviousLow),   "Crossunder Yesterdays Low",    "Crossunder Last Weeks Low")

////////////////////////////////////////////


MajBarsSinseLMHLC = 0
MajBarsSinseLMHLC := is_newbar("M") ? 0 : MajBarsSinseLMHLC[1] + 1


LMHLCLineWidth  = 5 //           = MajLineStyleIn=="Dotted" ? MajLineWidthIn + 2 : MajLineWidthIn + 3

// Last Weeks High Low Close Calculations and Plots

LMHLCOpen  = security(DailyAndWeeklyHLCCandleType, 'M', open,  barmerge.gaps_off, barmerge.lookahead_on)
LMHLCClose = security(DailyAndWeeklyHLCCandleType, 'M', close, barmerge.gaps_off, barmerge.lookahead_on)
LMHLCHigh  = security(DailyAndWeeklyHLCCandleType, 'M', high,  barmerge.gaps_off, barmerge.lookahead_on)
LMHLCLow   = security(DailyAndWeeklyHLCCandleType, 'M', low,   barmerge.gaps_off, barmerge.lookahead_on)


/////////////////////
// Get HLC from HT //

// Calc Open
LMHLCCurentOpen     = 0.0
LMHLCCurentOpen    := is_newbar('M') ? LMHLCOpen           : LMHLCCurentOpen[1]

LMHLCPreviousOpen   = 0.0
LMHLCPreviousOpen  := is_newbar('M') ? LMHLCCurentOpen[1]  : LMHLCPreviousOpen[1]

// Calc High
LMHLCCurrentHigh    = 0.0
LMHLCCurrentHigh   := is_newbar('M') ? LMHLCHigh           : max(LMHLCCurrentHigh[1], LMHLCHigh)

LMHLCPreviousHigh   = 0.0
LMHLCPreviousHigh  := is_newbar('M') ? LMHLCCurrentHigh[1] : LMHLCPreviousHigh[1]

// Calc Low
LMHLCCurrentLow     = 0.0
LMHLCCurrentLow    := is_newbar('M') ? LMHLCLow            : min(LMHLCCurrentLow[1], LMHLCLow)

LMHLCPreviousLow    = 0.0
LMHLCPreviousLow   := is_newbar('M') ? LMHLCCurrentLow[1]  : LMHLCPreviousLow[1]

// Calc Close
LMHLCPreviousClose  = 0.0
LMHLCPreviousClose := is_newbar('M') ? LMHLCClose[1]       : LMHLCPreviousClose[1]



var int LMCOTimeFromCalcA  = 0
var int LMHLCTimeToCalcA   = 0

if change(time("M"))
    LMCOTimeFromCalcA     := bar_index[1]
    LMHLCTimeToCalcA      := bar_index

LMHLCTimeFromCalcB         = bar_index[min(MajBarsSinseLMHLC, 300)]
LMHLCTimeToCalcB           = bar_index

LMHLCTimeFrom              = timeframe.isintraday ? LMHLCTimeFromCalcB : LMCOTimeFromCalcA
LMHLCTimeTo                = timeframe.isintraday ? LMHLCTimeToCalcB   : LMHLCTimeToCalcA


// LMHLCb = ShowLastWeeksHLC and WeeklyOrLess ? line.new(LMHLCTimeFrom, LMHLCPreviousClose, LMHLCTimeTo, LMHLCPreviousClose, color=color.blue,  style =  line.style_solid, extend = extend.right, width=LWHLCLineWidth) : na

LMCb = ShowLastMonthsHLC ? line.new(LMHLCTimeFrom, LMHLCPreviousClose, LMHLCTimeTo, LMHLCPreviousClose, color=color.blue,  style =  line.style_solid, extend = extend.right, width=LMHLCLineWidth) : na
LMHb = ShowLastMonthsHLC ? line.new(LMHLCTimeFrom, LMHLCPreviousHigh,  LMHLCTimeTo, LMHLCPreviousHigh,  color=color.green, style =  line.style_solid, extend = extend.right, width=LMHLCLineWidth) : na
LMLb = ShowLastMonthsHLC ? line.new(LMHLCTimeFrom, LMHLCPreviousLow,   LMHLCTimeTo, LMHLCPreviousLow,   color=color.red,   style =  line.style_solid, extend = extend.right, width=LMHLCLineWidth) : na


// delete previous lines in the same period
//if (not is_newbar(pp_res)// or not show_historical_levels)
line.delete(LMCb[1])
line.delete(LMHb[1])
line.delete(LMLb[1])

// alertcondition(not is_newbar('M') and cross(close,      LMHLCPreviousClose), "Price is Crossing LM's Close",       "Crossing Last Months Close")
// // alertcondition(not is_newbar(MajPivotPointResolution) and crossover(close,  LMHLCPreviousClose), "Crossover Last Months Close",   "Crossover Last Months Close")
// // alertcondition(not is_newbar(MajPivotPointResolution) and crossunder(close, LMHLCPreviousClose), "Crossunder Last Months Close",  "Crossunder Last Months Close")

// alertcondition(not is_newbar('M') and cross(close,      LMHLCPreviousHigh),  "Price is Crossing LM's High",        "Crossing Last Months High")
// // alertcondition(not is_newbar(MajPivotPointResolution) and crossover(close,  LMHLCPreviousHigh),  "Crossover Last Months High",    "Crossover Last Weeks High")
// // alertcondition(not is_newbar(MajPivotPointResolution) and crossunder(close, LMHLCPreviousHigh),  "Crossunder Last Months High",   "Crossunder Last Months High")

// alertcondition(not is_newbar('M') and cross(close,      LMHLCPreviousLow),   "Price is Crossing LM's Low",         "Crossing Last Months Low")
// // alertcondition(not is_newbar(MajPivotPointResolution) and crossover(close,  LMHLCPreviousLow),   "Crossover Last Months Low",     "Crossover Last Weeks Low")
// // alertcondition(not is_newbar(MajPivotPointResolution) and crossunder(close, LMHLCPreviousLow),   "Crossunder Last Months Low",    "Crossunder Last Months Low")
